// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_vesting
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/frame-weight-template.hbs
// --output=./scripts/../runtime/src/weights/pallet_vesting.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_vesting::weights::WeightInfo;

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7306`
		// Minimum execution time: 42_483 nanoseconds.
		Weight::from_ref_time(41_177_411)
			.saturating_add(Weight::from_proof_size(7306))
			// Standard Error: 7_207
			.saturating_add(Weight::from_ref_time(92_946).saturating_mul(l.into()))
			// Standard Error: 12_822
			.saturating_add(Weight::from_ref_time(127_768).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7306`
		// Minimum execution time: 41_464 nanoseconds.
		Weight::from_ref_time(40_804_769)
			.saturating_add(Weight::from_proof_size(7306))
			// Standard Error: 1_666
			.saturating_add(Weight::from_ref_time(91_264).saturating_mul(l.into()))
			// Standard Error: 2_965
			.saturating_add(Weight::from_ref_time(54_498).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 47_749 nanoseconds.
		Weight::from_ref_time(45_566_710)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 5_471
			.saturating_add(Weight::from_ref_time(97_286).saturating_mul(l.into()))
			// Standard Error: 9_734
			.saturating_add(Weight::from_ref_time(126_445).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 45_883 nanoseconds.
		Weight::from_ref_time(44_453_967)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 6_004
			.saturating_add(Weight::from_ref_time(107_530).saturating_mul(l.into()))
			// Standard Error: 10_682
			.saturating_add(Weight::from_ref_time(98_500).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 69_570 nanoseconds.
		Weight::from_ref_time(69_991_859)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 3_953
			.saturating_add(Weight::from_ref_time(87_229).saturating_mul(l.into()))
			// Standard Error: 7_033
			.saturating_add(Weight::from_ref_time(59_975).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `718 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `12512`
		// Minimum execution time: 73_355 nanoseconds.
		Weight::from_ref_time(73_756_121)
			.saturating_add(Weight::from_proof_size(12512))
			// Standard Error: 3_720
			.saturating_add(Weight::from_ref_time(96_445).saturating_mul(l.into()))
			// Standard Error: 6_619
			.saturating_add(Weight::from_ref_time(62_475).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 48_465 nanoseconds.
		Weight::from_ref_time(46_999_690)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 2_472
			.saturating_add(Weight::from_ref_time(86_199).saturating_mul(l.into()))
			// Standard Error: 4_566
			.saturating_add(Weight::from_ref_time(95_866).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 47_710 nanoseconds.
		Weight::from_ref_time(46_127_323)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 1_706
			.saturating_add(Weight::from_ref_time(108_392).saturating_mul(l.into()))
			// Standard Error: 3_150
			.saturating_add(Weight::from_ref_time(114_361).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
