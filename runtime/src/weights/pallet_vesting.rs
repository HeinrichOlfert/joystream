// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_vesting
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/frame-weight-template.hbs
// --output=./../runtime/src/weights/pallet_vesting.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_vesting::weights::WeightInfo;

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7306`
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(22_372_852, 0u64)
			.saturating_add(Weight::from_proof_size(7306))
			// Standard Error: 1_803
			.saturating_add(Weight::from_parts(35_853, 0u64).saturating_mul(l.into()))
			// Standard Error: 3_208
			.saturating_add(Weight::from_parts(86_120, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `7306`
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(22_356_404, 0u64)
			.saturating_add(Weight::from_proof_size(7306))
			// Standard Error: 1_483
			.saturating_add(Weight::from_parts(38_705, 0u64).saturating_mul(l.into()))
			// Standard Error: 2_638
			.saturating_add(Weight::from_parts(48_293, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(24_400_588, 0u64)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 1_328
			.saturating_add(Weight::from_parts(47_114, 0u64).saturating_mul(l.into()))
			// Standard Error: 2_364
			.saturating_add(Weight::from_parts(91_569, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[1, 28]`.
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(24_627_214, 0u64)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 1_077
			.saturating_add(Weight::from_parts(36_940, 0u64).saturating_mul(l.into()))
			// Standard Error: 1_916
			.saturating_add(Weight::from_parts(56_820, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_parts(40_373_705, 0u64)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 2_336
			.saturating_add(Weight::from_parts(21_228, 0u64).saturating_mul(l.into()))
			// Standard Error: 4_157
			.saturating_add(Weight::from_parts(49_207, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[0, 27]`.
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `718 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `12512`
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_parts(41_250_540, 0u64)
			.saturating_add(Weight::from_proof_size(12512))
			// Standard Error: 2_926
			.saturating_add(Weight::from_parts(44_439, 0u64).saturating_mul(l.into()))
			// Standard Error: 5_207
			.saturating_add(Weight::from_parts(88_265, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(25_010_480, 0u64)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 1_319
			.saturating_add(Weight::from_parts(43_843, 0u64).saturating_mul(l.into()))
			// Standard Error: 2_437
			.saturating_add(Weight::from_parts(85_901, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(1057), added: 3532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 49]`.
	/// The range of component `s` is `[2, 28]`.
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473 + l * (25 ±0) + s * (36 ±0)`
		//  Estimated: `9909`
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_parts(24_920_497, 0u64)
			.saturating_add(Weight::from_proof_size(9909))
			// Standard Error: 1_716
			.saturating_add(Weight::from_parts(46_885, 0u64).saturating_mul(l.into()))
			// Standard Error: 3_169
			.saturating_add(Weight::from_parts(100_397, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
