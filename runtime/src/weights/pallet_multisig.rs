// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_multisig
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/frame-weight-template.hbs
// --output=./scripts/../runtime/src/weights/pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_multisig::weights::WeightInfo;

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_604 nanoseconds.
		Weight::from_ref_time(19_689_603)
			.saturating_add(Weight::from_proof_size(0))
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(733).saturating_mul(z.into()))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `382 + s * (2 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 57_734 nanoseconds.
		Weight::from_ref_time(44_212_087)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 4_761
			.saturating_add(Weight::from_ref_time(154_221).saturating_mul(s.into()))
			// Standard Error: 46
			.saturating_add(Weight::from_ref_time(2_277).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `5821`
		// Minimum execution time: 43_135 nanoseconds.
		Weight::from_ref_time(31_001_407)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 871
			.saturating_add(Weight::from_ref_time(136_583).saturating_mul(s.into()))
			// Standard Error: 8
			.saturating_add(Weight::from_ref_time(2_104).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519 + s * (33 ±0)`
		//  Estimated: `8424`
		// Minimum execution time: 66_307 nanoseconds.
		Weight::from_ref_time(51_060_192)
			.saturating_add(Weight::from_proof_size(8424))
			// Standard Error: 1_556
			.saturating_add(Weight::from_ref_time(166_796).saturating_mul(s.into()))
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(2_105).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `389 + s * (2 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 43_627 nanoseconds.
		Weight::from_ref_time(45_045_985)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 2_250
			.saturating_add(Weight::from_ref_time(146_019).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `5821`
		// Minimum execution time: 28_071 nanoseconds.
		Weight::from_ref_time(29_595_446)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 1_002
			.saturating_add(Weight::from_ref_time(134_532).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `588 + s * (1 ±0)`
		//  Estimated: `5821`
		// Minimum execution time: 42_944 nanoseconds.
		Weight::from_ref_time(45_425_149)
			.saturating_add(Weight::from_proof_size(5821))
			// Standard Error: 1_200
			.saturating_add(Weight::from_ref_time(136_371).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
