// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_staking
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/frame-weight-template.hbs
// --output=./../runtime/src/weights/pallet_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_staking::weights::WeightInfo;

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1031`
		//  Estimated: `10530`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(36_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(10530))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:3 w:3)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:2 w:2)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn bond_extra() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2164`
		//  Estimated: `23032`
		// Minimum execution time: 69_000 nanoseconds.
		Weight::from_parts(70_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(23032))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:3 w:3)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:2 w:2)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2397`
		//  Estimated: `29678`
		// Minimum execution time: 75_000 nanoseconds.
		Weight::from_parts(76_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(29678))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_update(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `995`
		//  Estimated: `10586`
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_parts(27_922_393, 0u64)
			.saturating_add(Weight::from_proof_size(10586))
			// Standard Error: 777
			.saturating_add(Weight::from_parts(9_806, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2410 + s * (4 ±0)`
		//  Estimated: `32371 + s * (4 ±0)`
		// Minimum execution time: 65_000 nanoseconds.
		Weight::from_parts(68_936_010, 0u64)
			.saturating_add(Weight::from_proof_size(32371))
			// Standard Error: 1_967
			.saturating_add(Weight::from_parts(1_275_847, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(s.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:1 w:0)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MinCommission (r:1 w:0)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:1)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:1 w:0)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1414`
		//  Estimated: `22132`
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_parts(51_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(22132))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:128 w:128)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 128]`.
	fn kick(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1227 + k * (601 ±0)`
		//  Estimated: `3710 + k * (3033 ±0)`
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(23_531_759, 0u64)
			.saturating_add(Weight::from_proof_size(3710))
			// Standard Error: 4_321
			.saturating_add(Weight::from_parts(7_141_084, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_proof_size(3033).saturating_mul(k.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:1 w:0)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:17 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	fn nominate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1876 + n * (104 ±0)`
		//  Estimated: `22132 + n * (2520 ±0)`
		// Minimum execution time: 53_000 nanoseconds.
		Weight::from_parts(51_787_932, 0u64)
			.saturating_add(Weight::from_proof_size(22132))
			// Standard Error: 9_651
			.saturating_add(Weight::from_parts(2_778_562, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_proof_size(2520).saturating_mul(n.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1763`
		//  Estimated: `18076`
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_parts(47_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(18076))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn set_payee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753`
		//  Estimated: `3710`
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_parts(12_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3710))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:2 w:2)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	fn set_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `852`
		//  Estimated: `9967`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9967))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Staking ValidatorCount (r:0 w:1)
	// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_validator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_parts(2_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_no_eras() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_parts(7_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_parts(8_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_era_always() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_parts(7_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Invulnerables (r:0 w:1)
	// Proof Skipped: Staking Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 400]`.
	fn set_invulnerables(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_parts(2_344_853, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			// Standard Error: 133
			.saturating_add(Weight::from_parts(6_842, 0u64).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:0 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn force_unstake(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2108 + s * (4 ±0)`
		//  Estimated: `27860 + s * (4 ±0)`
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_parts(63_236_332, 0u64)
			.saturating_add(Weight::from_proof_size(27860))
			// Standard Error: 2_200
			.saturating_add(Weight::from_parts(1_254_274, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(s.into()))
	}
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Proof Skipped: Staking UnappliedSlashes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 1000]`.
	fn cancel_deferred_slash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66590`
		//  Estimated: `69065`
		// Minimum execution time: 109_000 nanoseconds.
		Weight::from_parts(676_194_153, 0u64)
			.saturating_add(Weight::from_proof_size(69065))
			// Standard Error: 41_277
			.saturating_add(Weight::from_parts(3_515_591, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasValidatorReward (r:1 w:0)
	// Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:257 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:1 w:0)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasRewardPoints (r:1 w:0)
	// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:1 w:0)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:257 w:0)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: System Account (r:257 w:257)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 256]`.
	fn payout_stakers_dead_controller(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `20587 + n * (140 ±0)`
		//  Estimated: `55312 + n * (8020 ±0)`
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_parts(88_072_068, 0u64)
			.saturating_add(Weight::from_proof_size(55312))
			// Standard Error: 14_948
			.saturating_add(Weight::from_parts(24_850_187, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(8020).saturating_mul(n.into()))
	}
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasValidatorReward (r:1 w:0)
	// Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:257 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:257 w:257)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:1 w:0)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasRewardPoints (r:1 w:0)
	// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:1 w:0)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:257 w:0)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: System Account (r:257 w:257)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:257 w:257)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 256]`.
	fn payout_stakers_alive_staked(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35490 + n * (456 ±0)`
		//  Estimated: `84430 + n * (16152 ±0)`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(100_917_281, 0u64)
			.saturating_add(Weight::from_proof_size(84430))
			// Standard Error: 10_200
			.saturating_add(Weight::from_parts(33_633_568, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_proof_size(16152).saturating_mul(n.into()))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:3 w:3)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:2 w:2)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 32]`.
	fn rebond(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2165 + l * (8 ±0)`
		//  Estimated: `25635`
		// Minimum execution time: 67_000 nanoseconds.
		Weight::from_parts(67_987_882, 0u64)
			.saturating_add(Weight::from_proof_size(25635))
			// Standard Error: 4_924
			.saturating_add(Weight::from_parts(77_036, 0u64).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
	fn reap_stash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2410 + s * (4 ±0)`
		//  Estimated: `31878 + s * (4 ±0)`
		// Minimum execution time: 71_000 nanoseconds.
		Weight::from_parts(71_514_419, 0u64)
			.saturating_add(Weight::from_proof_size(31878))
			// Standard Error: 1_463
			.saturating_add(Weight::from_parts(1_256_209, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_proof_size(4).saturating_mul(s.into()))
	}
	// Storage: BagsList CounterForListNodes (r:1 w:0)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:200 w:0)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:110 w:0)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:110 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:11 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:110 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:110 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ValidatorCount (r:1 w:0)
	// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinimumValidatorCount (r:1 w:0)
	// Proof: Staking MinimumValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:1)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:0 w:10)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:0 w:10)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking ErasStakers (r:0 w:10)
	// Proof Skipped: Staking ErasStakers (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasTotalStake (r:0 w:1)
	// Proof: Staking ErasTotalStake (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking ErasStartSessionIndex (r:0 w:1)
	// Proof: Staking ErasStartSessionIndex (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	// Storage: Staking MinimumActiveStake (r:0 w:1)
	// Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `n` is `[0, 100]`.
	fn new_era(v: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (3656 ±0) + n * (810 ±0)`
		//  Estimated: `527459 + v * (16909 ±39) + n * (13083 ±3)`
		// Minimum execution time: 494_000 nanoseconds.
		Weight::from_parts(496_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(527459))
			// Standard Error: 1_583_692
			.saturating_add(Weight::from_parts(50_826_936, 0u64).saturating_mul(v.into()))
			// Standard Error: 157_806
			.saturating_add(Weight::from_parts(14_130_976, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(206_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_proof_size(16909).saturating_mul(v.into()))
			.saturating_add(Weight::from_proof_size(13083).saturating_mul(n.into()))
	}
	// Storage: BagsList CounterForListNodes (r:1 w:0)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:200 w:0)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:1400 w:0)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1400 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:400 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1400 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1400 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinimumActiveStake (r:0 w:1)
	// Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `v` is `[200, 400]`.
	/// The range of component `n` is `[500, 1000]`.
	fn get_npos_voters(v: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2911 + v * (453 ±0) + n * (1001 ±0)`
		//  Estimated: `511899 + v * (14439 ±0) + n * (11919 ±0)`
		// Minimum execution time: 15_243_000 nanoseconds.
		Weight::from_parts(15_361_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(511899))
			// Standard Error: 163_642
			.saturating_add(Weight::from_parts(8_881_101, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(201_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(14439).saturating_mul(v.into()))
			.saturating_add(Weight::from_proof_size(11919).saturating_mul(n.into()))
	}
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:401 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// The range of component `v` is `[200, 400]`.
	fn get_npos_targets(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + v * (50 ±0)`
		//  Estimated: `3019 + v * (2520 ±0)`
		// Minimum execution time: 1_400_000 nanoseconds.
		Weight::from_parts(1_436_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3019))
			// Standard Error: 43_453
			.saturating_add(Weight::from_parts(2_737_449, 0u64).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_proof_size(2520).saturating_mul(v.into()))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:0 w:1)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:0 w:1)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:0 w:1)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:0 w:1)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:0 w:1)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_staking_configs_all_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_parts(5_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:0 w:1)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:0 w:1)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:0 w:1)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:0 w:1)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:0 w:1)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_staking_configs_all_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_parts(5_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:1 w:0)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:1 w:0)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Proof: BagsList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: BagsList ListBags (r:1 w:1)
	// Proof: BagsList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Proof: BagsList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn chill_other() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1873`
		//  Estimated: `19582`
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_parts(58_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19582))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking MinCommission (r:1 w:0)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:1)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	fn force_apply_min_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `3019`
		// Minimum execution time: 10_000 nanoseconds.
		Weight::from_parts(11_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3019))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_min_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000 nanoseconds.
		Weight::from_parts(2_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
