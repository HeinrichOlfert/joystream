// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for content
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=content
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/content/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for content.
pub trait WeightInfo {
	fn create_channel(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_with_assets(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_without_assets(_a: u32, _b: u32, ) -> Weight;
	fn delete_channel(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn update_channel_privilege_level() -> Weight;
	fn set_channel_paused_features_as_moderator(_a: u32, ) -> Weight;
	fn delete_channel_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn set_channel_visibility_as_moderator(_a: u32, ) -> Weight;
	fn delete_video_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn set_video_visibility_as_moderator(_a: u32, ) -> Weight;
	fn create_curator_group(_a: u32, ) -> Weight;
	fn update_curator_group_permissions(_a: u32, ) -> Weight;
	fn set_curator_group_status() -> Weight;
	fn add_curator_to_group() -> Weight;
	fn remove_curator_from_group() -> Weight;
	fn create_video_without_nft(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn create_video_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_without_nft(_a: u32, ) -> Weight;
	fn update_video_with_assets_without_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_with_nft(_a: u32, _b: u32, ) -> Weight;
	fn update_video_with_assets_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn delete_video_without_assets() -> Weight;
	fn delete_video_with_assets(_a: u32, _b: u32, ) -> Weight;
	fn initialize_channel_transfer(_a: u32, ) -> Weight;
	fn cancel_channel_transfer() -> Weight;
	fn accept_channel_transfer_curator_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_member(_a: u32, ) -> Weight;
	fn issue_creator_token(_a: u32, ) -> Weight;
	fn creator_token_issuer_transfer(_a: u32, _b: u32, ) -> Weight;
	fn make_creator_token_permissionless() -> Weight;
	fn deissue_creator_token() -> Weight;
	fn init_creator_token_sale(_a: u32, ) -> Weight;
	fn update_upcoming_creator_token_sale() -> Weight;
	fn finalize_creator_token_sale() -> Weight;
	fn issue_revenue_split() -> Weight;
	fn issue_revenue_split_as_collaborator() -> Weight;
	fn finalize_revenue_split() -> Weight;
	fn reduce_creator_token_patronage_rate_to() -> Weight;
	fn claim_creator_token_patronage_credit() -> Weight;
	fn update_channel_payouts() -> Weight;
	fn withdraw_from_curator_channel_balance() -> Weight;
	fn withdraw_from_member_channel_balance() -> Weight;
	fn claim_channel_reward(_h: u32, ) -> Weight;
	fn issue_nft(_w: u32, _b: u32, ) -> Weight;
	fn destroy_nft() -> Weight;
	fn sling_nft_back() -> Weight;
	fn offer_nft() -> Weight;
	fn cancel_offer() -> Weight;
	fn accept_incoming_offer() -> Weight;
	fn sell_nft() -> Weight;
	fn cancel_buy_now() -> Weight;
	fn update_buy_now_price() -> Weight;
	fn buy_nft() -> Weight;
	fn toggle_nft_limits() -> Weight;
	fn update_global_nft_limit() -> Weight;
	fn update_channel_nft_limit() -> Weight;
	fn start_english_auction(_w: u32, ) -> Weight;
	fn cancel_english_auction() -> Weight;
	fn make_english_auction_bid() -> Weight;
	fn settle_english_auction() -> Weight;
	fn start_open_auction(_w: u32, ) -> Weight;
	fn cancel_open_auction() -> Weight;
	fn cancel_open_auction_bid() -> Weight;
	fn pick_open_auction_winner() -> Weight;
	fn make_open_auction_bid() -> Weight;
	fn channel_owner_remark(_b: u32, ) -> Weight;
	fn channel_agent_remark(_b: u32, ) -> Weight;
	fn nft_owner_remark(_b: u32, ) -> Weight;
	fn update_channel_state_bloat_bond() -> Weight;
	fn update_video_state_bloat_bond() -> Weight;
}

/// Weights for content using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelStateBloatBondValue (r:1 w:0)
	// Proof: Content ChannelStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content NextChannelId (r:1 w:1)
	// Proof: Content NextChannelId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage DynamicBagCreationPolicies (r:1 w:0)
	// Proof: Storage DynamicBagCreationPolicies (max_values: None, max_size: Some(634), added: 3109, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:0 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 51]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 100]`.
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2455 + a * (174 ±0) + b * (104 ±0) + c * (40 ±0)`
		//  Estimated: `26685 + a * (2600 ±0) + c * (2855 ±0) + b * (2581 ±0)`
		// Minimum execution time: 443_000 nanoseconds.
		Weight::from_parts(148_901_926, 0u64)
			.saturating_add(Weight::from_proof_size(26685))
			// Standard Error: 38_274
			.saturating_add(Weight::from_parts(7_256_528, 0u64).saturating_mul(a.into()))
			// Standard Error: 29_011
			.saturating_add(Weight::from_parts(8_986_293, 0u64).saturating_mul(b.into()))
			// Standard Error: 7_318
			.saturating_add(Weight::from_parts(9_122_699, 0u64).saturating_mul(c.into()))
			// Standard Error: 38_274
			.saturating_add(Weight::from_parts(5_638_466, 0u64).saturating_mul(d.into()))
			// Standard Error: 3_707
			.saturating_add(Weight::from_parts(449_321, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:10 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:12 w:12)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 100]`.
	/// The range of component `e` is `[1, 13]`.
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4820 + a * (181 ±0) + c * (390 ±0) + e * (112 ±0)`
		//  Estimated: `22820 + a * (2600 ±0) + e * (2581 ±0) + c * (5233 ±0)`
		// Minimum execution time: 553_000 nanoseconds.
		Weight::from_parts(243_326_707, 0u64)
			.saturating_add(Weight::from_proof_size(22820))
			// Standard Error: 32_681
			.saturating_add(Weight::from_parts(7_938_644, 0u64).saturating_mul(a.into()))
			// Standard Error: 32_681
			.saturating_add(Weight::from_parts(6_522_660, 0u64).saturating_mul(b.into()))
			// Standard Error: 32_681
			.saturating_add(Weight::from_parts(21_063_566, 0u64).saturating_mul(c.into()))
			// Standard Error: 3_165
			.saturating_add(Weight::from_parts(482_786, 0u64).saturating_mul(d.into()))
			// Standard Error: 24_771
			.saturating_add(Weight::from_parts(7_801_560, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(e.into()))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(c.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 100]`.
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3436 + a * (181 ±0)`
		//  Estimated: `9616 + a * (2600 ±0)`
		// Minimum execution time: 205_000 nanoseconds.
		Weight::from_parts(157_693_447, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			// Standard Error: 13_599
			.saturating_add(Weight::from_parts(7_288_488, 0u64).saturating_mul(a.into()))
			// Standard Error: 1_311
			.saturating_add(Weight::from_parts(435_461, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:11 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	// Storage: System Account (r:13 w:13)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 51]`.
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4290 + a * (408 ±0) + b * (112 ±0) + c * (56 ±0)`
		//  Estimated: `23494 + c * (2855 ±0) + a * (5233 ±0) + b * (2581 ±0)`
		// Minimum execution time: 508_000 nanoseconds.
		Weight::from_parts(198_227_380, 0u64)
			.saturating_add(Weight::from_proof_size(23494))
			// Standard Error: 47_380
			.saturating_add(Weight::from_parts(21_363_368, 0u64).saturating_mul(a.into()))
			// Standard Error: 35_869
			.saturating_add(Weight::from_parts(7_836_327, 0u64).saturating_mul(b.into()))
			// Standard Error: 9_041
			.saturating_add(Weight::from_parts(6_201_984, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	fn update_channel_privilege_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2064`
		//  Estimated: `6517`
		// Minimum execution time: 88_000 nanoseconds.
		Weight::from_parts(88_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6517))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3129`
		//  Estimated: `9616`
		// Minimum execution time: 168_000 nanoseconds.
		Weight::from_parts(169_958_052, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			// Standard Error: 2_567
			.saturating_add(Weight::from_parts(420_910, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:10 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:11 w:11)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4678 + a * (408 ±0) + b * (112 ±0)`
		//  Estimated: `16680 + a * (5233 ±0) + b * (2581 ±0)`
		// Minimum execution time: 376_000 nanoseconds.
		Weight::from_parts(212_350_769, 0u64)
			.saturating_add(Weight::from_proof_size(16680))
			// Standard Error: 21_864
			.saturating_add(Weight::from_parts(20_501_532, 0u64).saturating_mul(a.into()))
			// Standard Error: 16_552
			.saturating_add(Weight::from_parts(7_506_039, 0u64).saturating_mul(b.into()))
			// Standard Error: 2_112
			.saturating_add(Weight::from_parts(492_812, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3135`
		//  Estimated: `9616`
		// Minimum execution time: 133_000 nanoseconds.
		Weight::from_parts(132_725_898, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			// Standard Error: 3_469
			.saturating_add(Weight::from_parts(490_685, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:21 w:21)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5727 + a * (379 ±0) + b * (112 ±0)`
		//  Estimated: `19668 + a * (5233 ±0) + b * (2581 ±0)`
		// Minimum execution time: 346_000 nanoseconds.
		Weight::from_parts(182_640_918, 0u64)
			.saturating_add(Weight::from_proof_size(19668))
			// Standard Error: 28_349
			.saturating_add(Weight::from_parts(20_802_021, 0u64).saturating_mul(a.into()))
			// Standard Error: 43_886
			.saturating_add(Weight::from_parts(7_896_308, 0u64).saturating_mul(b.into()))
			// Standard Error: 5_601
			.saturating_add(Weight::from_parts(451_276, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3087`
		//  Estimated: `12604`
		// Minimum execution time: 127_000 nanoseconds.
		Weight::from_parts(128_336_875, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			// Standard Error: 3_052
			.saturating_add(Weight::from_parts(480_630, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content NextCuratorGroupId (r:1 w:1)
	// Proof: Content NextCuratorGroupId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:0 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 25]`.
	fn create_curator_group(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `924`
		//  Estimated: `3656`
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(23_106_297, 0u64)
			.saturating_add(Weight::from_proof_size(3656))
			// Standard Error: 2_681
			.saturating_add(Weight::from_parts(2_002_803, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 25]`.
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2178`
		//  Estimated: `6755`
		// Minimum execution time: 65_000 nanoseconds.
		Weight::from_parts(67_624_457, 0u64)
			.saturating_add(Weight::from_proof_size(6755))
			// Standard Error: 4_961
			.saturating_add(Weight::from_parts(2_441_060, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn set_curator_group_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2178`
		//  Estimated: `6755`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(77_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6755))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn add_curator_to_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2309`
		//  Estimated: `9405`
		// Minimum execution time: 118_000 nanoseconds.
		Weight::from_parts(118_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9405))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn remove_curator_from_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2178`
		//  Estimated: `6755`
		// Minimum execution time: 114_000 nanoseconds.
		Weight::from_parts(115_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6755))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content NextVideoId (r:1 w:1)
	// Proof: Content NextVideoId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:0 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4820 + b * (112 ±0)`
		//  Estimated: `26437 + b * (2581 ±0)`
		// Minimum execution time: 403_000 nanoseconds.
		Weight::from_parts(253_684_314, 0u64)
			.saturating_add(Weight::from_proof_size(26437))
			// Standard Error: 18_822
			.saturating_add(Weight::from_parts(5_933_817, 0u64).saturating_mul(a.into()))
			// Standard Error: 29_137
			.saturating_add(Weight::from_parts(7_872_902, 0u64).saturating_mul(b.into()))
			// Standard Error: 3_719
			.saturating_add(Weight::from_parts(482_948, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content NextVideoId (r:1 w:1)
	// Proof: Content NextVideoId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:0 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[2, 20]`.
	/// The range of component `d` is `[1, 100]`.
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5905 + b * (112 ±0) + c * (187 ±0)`
		//  Estimated: `37098 + b * (2581 ±0) + c * (2600 ±0)`
		// Minimum execution time: 514_000 nanoseconds.
		Weight::from_parts(309_395_985, 0u64)
			.saturating_add(Weight::from_proof_size(37098))
			// Standard Error: 16_769
			.saturating_add(Weight::from_parts(5_869_012, 0u64).saturating_mul(a.into()))
			// Standard Error: 25_953
			.saturating_add(Weight::from_parts(7_441_746, 0u64).saturating_mul(b.into()))
			// Standard Error: 17_681
			.saturating_add(Weight::from_parts(3_224_793, 0u64).saturating_mul(c.into()))
			// Standard Error: 3_315
			.saturating_add(Weight::from_parts(459_473, 0u64).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(31_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(c.into()))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3087`
		//  Estimated: `12604`
		// Minimum execution time: 130_000 nanoseconds.
		Weight::from_parts(130_535_067, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			// Standard Error: 1_369
			.saturating_add(Weight::from_parts(429_286, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:40)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:22 w:22)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 20]`.
	/// The range of component `c` is `[1, 13]`.
	/// The range of component `d` is `[1, 100]`.
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4956 + b * (384 ±0) + c * (112 ±0)`
		//  Estimated: `25808 + c * (2581 ±0) + b * (5233 ±0)`
		// Minimum execution time: 494_000 nanoseconds.
		Weight::from_parts(223_865_020, 0u64)
			.saturating_add(Weight::from_proof_size(25808))
			// Standard Error: 27_937
			.saturating_add(Weight::from_parts(5_774_460, 0u64).saturating_mul(a.into()))
			// Standard Error: 27_937
			.saturating_add(Weight::from_parts(20_785_722, 0u64).saturating_mul(b.into()))
			// Standard Error: 43_237
			.saturating_add(Weight::from_parts(7_330_215, 0u64).saturating_mul(c.into()))
			// Standard Error: 5_523
			.saturating_add(Weight::from_parts(455_095, 0u64).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(b.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 20]`.
	/// The range of component `b` is `[1, 100]`.
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4399 + a * (200 ±0)`
		//  Estimated: `23265 + a * (2600 ±0)`
		// Minimum execution time: 247_000 nanoseconds.
		Weight::from_parts(201_557_257, 0u64)
			.saturating_add(Weight::from_proof_size(23265))
			// Standard Error: 12_368
			.saturating_add(Weight::from_parts(3_098_755, 0u64).saturating_mul(a.into()))
			// Standard Error: 2_315
			.saturating_add(Weight::from_parts(431_485, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:40)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:22 w:22)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 20]`.
	/// The range of component `c` is `[1, 13]`.
	/// The range of component `d` is `[2, 20]`.
	/// The range of component `e` is `[1, 100]`.
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5422 + b * (432 ±0) + c * (112 ±0) + d * (210 ±0)`
		//  Estimated: `36469 + b * (5233 ±0) + c * (2581 ±0) + d * (2600 ±0)`
		// Minimum execution time: 627_000 nanoseconds.
		Weight::from_parts(293_011_166, 0u64)
			.saturating_add(Weight::from_proof_size(36469))
			// Standard Error: 27_255
			.saturating_add(Weight::from_parts(5_991_722, 0u64).saturating_mul(a.into()))
			// Standard Error: 27_255
			.saturating_add(Weight::from_parts(20_769_259, 0u64).saturating_mul(b.into()))
			// Standard Error: 42_175
			.saturating_add(Weight::from_parts(7_275_440, 0u64).saturating_mul(c.into()))
			// Standard Error: 28_736
			.saturating_add(Weight::from_parts(3_029_950, 0u64).saturating_mul(d.into()))
			// Standard Error: 5_390
			.saturating_add(Weight::from_parts(460_234, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(29_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(d.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn delete_video_without_assets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3371`
		//  Estimated: `17810`
		// Minimum execution time: 165_000 nanoseconds.
		Weight::from_parts(167_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17810))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:23 w:23)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5288 + a * (386 ±0) + b * (112 ±0)`
		//  Estimated: `24874 + b * (2581 ±0) + a * (5233 ±0)`
		// Minimum execution time: 323_000 nanoseconds.
		Weight::from_parts(205_611_579, 0u64)
			.saturating_add(Weight::from_proof_size(24874))
			// Standard Error: 14_105
			.saturating_add(Weight::from_parts(20_732_788, 0u64).saturating_mul(a.into()))
			// Standard Error: 21_843
			.saturating_add(Weight::from_parts(7_772_260, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:11 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content NextTransferId (r:1 w:1)
	// Proof: Content NextTransferId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3667 + a * (200 ±0)`
		//  Estimated: `12719 + a * (2600 ±0)`
		// Minimum execution time: 151_000 nanoseconds.
		Weight::from_parts(154_353_919, 0u64)
			.saturating_add(Weight::from_proof_size(12719))
			// Standard Error: 15_413
			.saturating_add(Weight::from_parts(7_046_477, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn cancel_channel_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3135`
		//  Estimated: `9616`
		// Minimum execution time: 164_000 nanoseconds.
		Weight::from_parts(165_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1800 + a * (30 ±0)`
		//  Estimated: `7028`
		// Minimum execution time: 58_000 nanoseconds.
		Weight::from_parts(60_461_598, 0u64)
			.saturating_add(Weight::from_proof_size(7028))
			// Standard Error: 11_673
			.saturating_add(Weight::from_parts(6_504_071, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2862 + a * (30 ±0)`
		//  Estimated: `12231`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(82_336_176, 0u64)
			.saturating_add(Weight::from_proof_size(12231))
			// Standard Error: 9_799
			.saturating_add(Weight::from_parts(6_524_739, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2468 + a * (55 ±0)`
		//  Estimated: `13770`
		// Minimum execution time: 80_000 nanoseconds.
		Weight::from_parts(82_004_894, 0u64)
			.saturating_add(Weight::from_proof_size(13770))
			// Standard Error: 10_944
			.saturating_add(Weight::from_parts(6_616_616, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token NextTokenId (r:1 w:1)
	// Proof: Token NextTokenId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Token SymbolsUsed (r:1 w:1)
	// Proof: Token SymbolsUsed (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1023 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:0 w:1023)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:0 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 1024]`.
	fn issue_creator_token(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5183 + a * (165 ±0)`
		//  Estimated: `18359 + a * (2600 ±0)`
		// Minimum execution time: 204_000 nanoseconds.
		Weight::from_parts(78_180_807, 0u64)
			.saturating_add(Weight::from_proof_size(18359))
			// Standard Error: 8_504
			.saturating_add(Weight::from_parts(8_420_342, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1025 w:1025)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1024 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 1024]`.
	/// The range of component `b` is `[1, 100]`.
	fn creator_token_issuer_transfer(a: u32, _b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5931 + a * (165 ±0)`
		//  Estimated: `21111 + a * (5564 ±0)`
		// Minimum execution time: 232_000 nanoseconds.
		Weight::from_parts(98_568_840, 0u64)
			.saturating_add(Weight::from_proof_size(21111))
			// Standard Error: 6_898
			.saturating_add(Weight::from_parts(10_299_809, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_proof_size(5564).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	fn make_creator_token_permissionless() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3245`
		//  Estimated: `12430`
		// Minimum execution time: 132_000 nanoseconds.
		Weight::from_parts(135_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12430))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token SymbolsUsed (r:0 w:1)
	// Proof: Token SymbolsUsed (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn deissue_creator_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3212`
		//  Estimated: `12430`
		// Minimum execution time: 156_000 nanoseconds.
		Weight::from_parts(166_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12430))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token MinSaleDuration (r:1 w:0)
	// Proof: Token MinSaleDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn init_creator_token_sale(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3684`
		//  Estimated: `15893`
		// Minimum execution time: 148_000 nanoseconds.
		Weight::from_parts(149_358_396, 0u64)
			.saturating_add(Weight::from_proof_size(15893))
			// Standard Error: 4_311
			.saturating_add(Weight::from_parts(512_147, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token MinSaleDuration (r:1 w:0)
	// Proof: Token MinSaleDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn update_upcoming_creator_token_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3341`
		//  Estimated: `12929`
		// Minimum execution time: 138_000 nanoseconds.
		Weight::from_parts(139_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12929))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn finalize_creator_token_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4106`
		//  Estimated: `15905`
		// Minimum execution time: 147_000 nanoseconds.
		Weight::from_parts(148_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15905))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Proof: Token MinRevenueSplitDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	// Proof: Token MinRevenueSplitTimeToStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn issue_revenue_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3996`
		//  Estimated: `19145`
		// Minimum execution time: 172_000 nanoseconds.
		Weight::from_parts(174_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19145))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Proof: Token MinRevenueSplitDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	// Proof: Token MinRevenueSplitTimeToStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn issue_revenue_split_as_collaborator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3275`
		//  Estimated: `20185`
		// Minimum execution time: 92_000 nanoseconds.
		Weight::from_parts(93_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(20185))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn finalize_revenue_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3730`
		//  Estimated: `17636`
		// Minimum execution time: 151_000 nanoseconds.
		Weight::from_parts(154_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17636))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3245`
		//  Estimated: `12430`
		// Minimum execution time: 148_000 nanoseconds.
		Weight::from_parts(177_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12430))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(339), added: 2814, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	fn claim_creator_token_patronage_credit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2829`
		//  Estimated: `11742`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(96_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(11742))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:1)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content ChannelCashoutsEnabled (r:0 w:1)
	// Proof: Content ChannelCashoutsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content MaxCashoutAllowed (r:0 w:1)
	// Proof: Content MaxCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinCashoutAllowed (r:0 w:1)
	// Proof: Content MinCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content Commitment (r:0 w:1)
	// Proof: Content Commitment (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn update_channel_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `13204`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_parts(71_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(13204))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn withdraw_from_curator_channel_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2208`
		//  Estimated: `9631`
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_parts(64_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9631))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_from_member_channel_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2257`
		//  Estimated: `11170`
		// Minimum execution time: 60_000 nanoseconds.
		Weight::from_parts(61_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(11170))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelCashoutsEnabled (r:1 w:0)
	// Proof: Content ChannelCashoutsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content MaxCashoutAllowed (r:1 w:0)
	// Proof: Content MaxCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinCashoutAllowed (r:1 w:0)
	// Proof: Content MinCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content Commitment (r:1 w:0)
	// Proof: Content Commitment (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `h` is `[1, 10]`.
	fn claim_channel_reward(h: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2331`
		//  Estimated: `11676`
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_parts(93_085_695, 0u64)
			.saturating_add(Weight::from_proof_size(11676))
			// Standard Error: 10_791
			.saturating_add(Weight::from_parts(520_379, 0u64).saturating_mul(h.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	/// The range of component `b` is `[1, 100]`.
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4158 + w * (204 ±0)`
		//  Estimated: `20665 + w * (2600 ±0)`
		// Minimum execution time: 247_000 nanoseconds.
		Weight::from_parts(198_768_746, 0u64)
			.saturating_add(Weight::from_proof_size(20665))
			// Standard Error: 20_323
			.saturating_add(Weight::from_parts(3_009_542, 0u64).saturating_mul(w.into()))
			// Standard Error: 3_805
			.saturating_add(Weight::from_parts(472_252, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn destroy_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3112`
		//  Estimated: `12604`
		// Minimum execution time: 186_000 nanoseconds.
		Weight::from_parts(188_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn sling_nft_back() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2397`
		//  Estimated: `8952`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_parts(48_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(8952))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn offer_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4034`
		//  Estimated: `15204`
		// Minimum execution time: 194_000 nanoseconds.
		Weight::from_parts(195_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15204))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn cancel_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3137`
		//  Estimated: `12604`
		// Minimum execution time: 187_000 nanoseconds.
		Weight::from_parts(188_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn accept_incoming_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3462`
		//  Estimated: `19860`
		// Minimum execution time: 93_000 nanoseconds.
		Weight::from_parts(95_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19860))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn sell_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3112`
		//  Estimated: `12604`
		// Minimum execution time: 187_000 nanoseconds.
		Weight::from_parts(189_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn cancel_buy_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3128`
		//  Estimated: `12604`
		// Minimum execution time: 187_000 nanoseconds.
		Weight::from_parts(188_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn update_buy_now_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3128`
		//  Estimated: `12604`
		// Minimum execution time: 187_000 nanoseconds.
		Weight::from_parts(189_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn buy_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3453`
		//  Estimated: `19860`
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_parts(95_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19860))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content NftLimitsEnabled (r:1 w:1)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn toggle_nft_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `496`
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_parts(12_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(496))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content GlobalDailyNftLimit (r:1 w:1)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn update_global_nft_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `599`
		//  Estimated: `507`
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_parts(13_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(507))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn update_channel_nft_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2801`
		//  Estimated: `9616`
		// Minimum execution time: 139_000 nanoseconds.
		Weight::from_parts(139_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	fn start_english_auction(w: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4207 + w * (206 ±0)`
		//  Estimated: `17143 + w * (2600 ±0)`
		// Minimum execution time: 219_000 nanoseconds.
		Weight::from_parts(217_026_946, 0u64)
			.saturating_add(Weight::from_proof_size(17143))
			// Standard Error: 22_433
			.saturating_add(Weight::from_parts(3_177_856, 0u64).saturating_mul(w.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn cancel_english_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3335`
		//  Estimated: `12604`
		// Minimum execution time: 191_000 nanoseconds.
		Weight::from_parts(192_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:3 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: System Account (r:5 w:5)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn make_english_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4462`
		//  Estimated: `27666`
		// Minimum execution time: 130_000 nanoseconds.
		Weight::from_parts(135_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(27666))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn settle_english_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3345`
		//  Estimated: `17260`
		// Minimum execution time: 92_000 nanoseconds.
		Weight::from_parts(94_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17260))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Content MaxBidLockDuration (r:1 w:0)
	// Proof: Content MaxBidLockDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinBidLockDuration (r:1 w:0)
	// Proof: Content MinBidLockDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	fn start_open_auction(w: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4088 + w * (201 ±0)`
		//  Estimated: `15123 + w * (2600 ±0)`
		// Minimum execution time: 209_000 nanoseconds.
		Weight::from_parts(206_113_437, 0u64)
			.saturating_add(Weight::from_proof_size(15123))
			// Standard Error: 13_556
			.saturating_add(Weight::from_parts(3_231_042, 0u64).saturating_mul(w.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	fn cancel_open_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3322`
		//  Estimated: `12604`
		// Minimum execution time: 191_000 nanoseconds.
		Weight::from_parts(193_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_open_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3387`
		//  Estimated: `16709`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(81_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(16709))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn pick_open_auction_winner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3678`
		//  Estimated: `22411`
		// Minimum execution time: 103_000 nanoseconds.
		Weight::from_parts(111_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(22411))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:0)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:4 w:4)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn make_open_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4087`
		//  Estimated: `25014`
		// Minimum execution time: 120_000 nanoseconds.
		Weight::from_parts(122_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(25014))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn channel_owner_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1730`
		//  Estimated: `6517`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(42_003_897, 0u64)
			.saturating_add(Weight::from_proof_size(6517))
			// Standard Error: 1_386
			.saturating_add(Weight::from_parts(476_171, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn channel_agent_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2801`
		//  Estimated: `9616`
		// Minimum execution time: 121_000 nanoseconds.
		Weight::from_parts(122_375_055, 0u64)
			.saturating_add(Weight::from_proof_size(9616))
			// Standard Error: 3_086
			.saturating_add(Weight::from_parts(431_166, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1127), added: 3602, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(889), added: 3364, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn nft_owner_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3335`
		//  Estimated: `12604`
		// Minimum execution time: 172_000 nanoseconds.
		Weight::from_parts(174_125_776, 0u64)
			.saturating_add(Weight::from_proof_size(12604))
			// Standard Error: 5_792
			.saturating_add(Weight::from_parts(420_356, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelStateBloatBondValue (r:0 w:1)
	// Proof: Content ChannelStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_channel_state_bloat_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371`
		//  Estimated: `3153`
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:0 w:1)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_video_state_bloat_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371`
		//  Estimated: `3153`
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(16_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_privilege_level() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_curator_group(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_curator_group_status() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_curator_to_group() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn remove_curator_from_group() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_without_assets() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_channel_transfer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_creator_token(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn creator_token_issuer_transfer(a: u32, _b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_creator_token_permissionless() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn deissue_creator_token() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn init_creator_token_sale(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_upcoming_creator_token_sale() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn finalize_creator_token_sale() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_revenue_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_revenue_split_as_collaborator() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn finalize_revenue_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn claim_creator_token_patronage_credit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_payouts() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_from_curator_channel_balance() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_from_member_channel_balance() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn claim_channel_reward(h: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn destroy_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn sling_nft_back() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn offer_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_offer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_incoming_offer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn sell_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_buy_now() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_buy_now_price() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn buy_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn toggle_nft_limits() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_global_nft_limit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_nft_limit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn start_english_auction(w: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_english_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_english_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_english_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn start_open_auction(w: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_open_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_open_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn pick_open_auction_winner() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_open_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_owner_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_agent_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn nft_owner_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_state_bloat_bond() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_state_bloat_bond() -> Weight {
		Weight::from_parts(0, 0)
	}
}
