// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for content
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-16, STEPS: `5`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=content
// --extrinsic=*
// --chain=prod-test
// --steps=5
// --repeat=2
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/content/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for content.
pub trait WeightInfo {
	fn create_channel(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_with_assets(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_without_assets(_a: u32, _b: u32, ) -> Weight;
	fn delete_channel(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn update_channel_privilege_level() -> Weight;
	fn set_channel_paused_features_as_moderator(_a: u32, ) -> Weight;
	fn delete_channel_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn set_channel_visibility_as_moderator(_a: u32, ) -> Weight;
	fn delete_video_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn set_video_visibility_as_moderator(_a: u32, ) -> Weight;
	fn create_curator_group(_a: u32, ) -> Weight;
	fn update_curator_group_permissions(_a: u32, ) -> Weight;
	fn set_curator_group_status() -> Weight;
	fn add_curator_to_group() -> Weight;
	fn remove_curator_from_group() -> Weight;
	fn create_video_without_nft(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn create_video_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_without_nft(_a: u32, ) -> Weight;
	fn update_video_with_assets_without_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_with_nft(_a: u32, _b: u32, ) -> Weight;
	fn update_video_with_assets_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn delete_video_without_assets() -> Weight;
	fn delete_video_with_assets(_a: u32, _b: u32, ) -> Weight;
	fn initialize_channel_transfer(_a: u32, ) -> Weight;
	fn cancel_channel_transfer() -> Weight;
	fn accept_channel_transfer_curator_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_member(_a: u32, ) -> Weight;
	fn issue_creator_token(_a: u32, ) -> Weight;
	fn creator_token_issuer_transfer(_a: u32, _b: u32, ) -> Weight;
	fn make_creator_token_permissionless() -> Weight;
	fn deissue_creator_token() -> Weight;
	fn init_creator_token_sale(_a: u32, ) -> Weight;
	fn update_upcoming_creator_token_sale() -> Weight;
	fn finalize_creator_token_sale() -> Weight;
	fn activate_amm() -> Weight;
	fn deactivate_amm() -> Weight;
	fn issue_revenue_split() -> Weight;
	fn issue_revenue_split_as_collaborator() -> Weight;
	fn finalize_revenue_split() -> Weight;
	fn reduce_creator_token_patronage_rate_to() -> Weight;
	fn claim_creator_token_patronage_credit() -> Weight;
	fn update_channel_payouts() -> Weight;
	fn withdraw_from_curator_channel_balance() -> Weight;
	fn withdraw_from_member_channel_balance() -> Weight;
	fn claim_channel_reward(_h: u32, ) -> Weight;
	fn issue_nft(_w: u32, _b: u32, ) -> Weight;
	fn destroy_nft() -> Weight;
	fn sling_nft_back() -> Weight;
	fn offer_nft() -> Weight;
	fn cancel_offer() -> Weight;
	fn accept_incoming_offer() -> Weight;
	fn sell_nft() -> Weight;
	fn cancel_buy_now() -> Weight;
	fn update_buy_now_price() -> Weight;
	fn buy_nft() -> Weight;
	fn toggle_nft_limits() -> Weight;
	fn update_global_nft_limit() -> Weight;
	fn update_channel_nft_limit() -> Weight;
	fn start_english_auction(_w: u32, ) -> Weight;
	fn cancel_english_auction() -> Weight;
	fn make_english_auction_bid() -> Weight;
	fn settle_english_auction() -> Weight;
	fn start_open_auction(_w: u32, ) -> Weight;
	fn cancel_open_auction() -> Weight;
	fn cancel_open_auction_bid() -> Weight;
	fn pick_open_auction_winner() -> Weight;
	fn make_open_auction_bid() -> Weight;
	fn channel_owner_remark(_b: u32, ) -> Weight;
	fn channel_agent_remark(_b: u32, ) -> Weight;
	fn nft_owner_remark(_b: u32, ) -> Weight;
	fn update_channel_state_bloat_bond() -> Weight;
	fn update_video_state_bloat_bond() -> Weight;
	fn creator_token_issuer_remark(_b: u32, ) -> Weight;
}

/// Weights for content using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelStateBloatBondValue (r:1 w:0)
	// Proof: Content ChannelStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content NextChannelId (r:1 w:1)
	// Proof: Content NextChannelId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage DynamicBagCreationPolicies (r:1 w:0)
	// Proof: Storage DynamicBagCreationPolicies (max_values: None, max_size: Some(634), added: 3109, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:0 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 51]`.
	/// The range of component `d` is `[1, 10]`.
	/// The range of component `e` is `[1, 100]`.
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2403 + a * (191 ±0) + b * (104 ±0) + c * (40 ±0)`
		//  Estimated: `26595 + b * (2581 ±0) + c * (2855 ±0) + a * (2600 ±0)`
		// Minimum execution time: 456_000 nanoseconds.
		Weight::from_parts(138_798_497, 0u64)
			.saturating_add(Weight::from_proof_size(26595))
			// Standard Error: 1_108_469
			.saturating_add(Weight::from_parts(6_363_238, 0u64).saturating_mul(a.into()))
			// Standard Error: 855_695
			.saturating_add(Weight::from_parts(9_371_625, 0u64).saturating_mul(b.into()))
			// Standard Error: 204_461
			.saturating_add(Weight::from_parts(9_372_757, 0u64).saturating_mul(c.into()))
			// Standard Error: 1_108_469
			.saturating_add(Weight::from_parts(7_741_287, 0u64).saturating_mul(d.into()))
			// Standard Error: 103_282
			.saturating_add(Weight::from_parts(621_091, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:10 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:12 w:12)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	/// The range of component `c` is `[1, 10]`.
	/// The range of component `d` is `[1, 100]`.
	/// The range of component `e` is `[1, 13]`.
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4835 + a * (181 ±0) + c * (385 ±0) + e * (112 ±0)`
		//  Estimated: `22750 + c * (5233 ±0) + e * (2581 ±0) + a * (2600 ±0)`
		// Minimum execution time: 521_000 nanoseconds.
		Weight::from_parts(164_331_016, 0u64)
			.saturating_add(Weight::from_proof_size(22750))
			// Standard Error: 1_409_993
			.saturating_add(Weight::from_parts(8_677_650, 0u64).saturating_mul(a.into()))
			// Standard Error: 1_409_993
			.saturating_add(Weight::from_parts(7_427_650, 0u64).saturating_mul(b.into()))
			// Standard Error: 1_409_993
			.saturating_add(Weight::from_parts(25_284_358, 0u64).saturating_mul(c.into()))
			// Standard Error: 131_355
			.saturating_add(Weight::from_parts(677_717, 0u64).saturating_mul(d.into()))
			// Standard Error: 1_088_279
			.saturating_add(Weight::from_parts(9_175_160, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(e.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(e.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(e.into()))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:10 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 100]`.
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3411 + a * (181 ±0)`
		//  Estimated: `9546 + a * (2600 ±0)`
		// Minimum execution time: 191_000 nanoseconds.
		Weight::from_parts(143_112_111, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			// Standard Error: 908_846
			.saturating_add(Weight::from_parts(7_898_938, 0u64).saturating_mul(a.into()))
			// Standard Error: 84_159
			.saturating_add(Weight::from_parts(517_912, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:11 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	// Storage: System Account (r:13 w:13)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 51]`.
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4291 + a * (397 ±0) + b * (112 ±0) + c * (56 ±0)`
		//  Estimated: `23424 + a * (5233 ±0) + b * (2581 ±0) + c * (2855 ±0)`
		// Minimum execution time: 514_000 nanoseconds.
		Weight::from_parts(158_042_158, 0u64)
			.saturating_add(Weight::from_proof_size(23424))
			// Standard Error: 1_426_211
			.saturating_add(Weight::from_parts(24_632_734, 0u64).saturating_mul(a.into()))
			// Standard Error: 1_097_865
			.saturating_add(Weight::from_parts(8_498_464, 0u64).saturating_mul(b.into()))
			// Standard Error: 262_399
			.saturating_add(Weight::from_parts(6_549_738, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(c.into()))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	fn update_channel_privilege_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2084`
		//  Estimated: `6537`
		// Minimum execution time: 83_000 nanoseconds.
		Weight::from_parts(83_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6537))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3109`
		//  Estimated: `9546`
		// Minimum execution time: 152_000 nanoseconds.
		Weight::from_parts(152_342_427, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			// Standard Error: 63_151
			.saturating_add(Weight::from_parts(574_852, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:10 w:10)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:11 w:11)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4679 + a * (397 ±0) + b * (112 ±0)`
		//  Estimated: `16610 + a * (5233 ±0) + b * (2581 ±0)`
		// Minimum execution time: 369_000 nanoseconds.
		Weight::from_parts(169_591_914, 0u64)
			.saturating_add(Weight::from_proof_size(16610))
			// Standard Error: 1_317_443
			.saturating_add(Weight::from_parts(23_376_460, 0u64).saturating_mul(a.into()))
			// Standard Error: 1_014_153
			.saturating_add(Weight::from_parts(8_874_719, 0u64).saturating_mul(b.into()))
			// Standard Error: 122_425
			.saturating_add(Weight::from_parts(623_446, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3115`
		//  Estimated: `9546`
		// Minimum execution time: 120_000 nanoseconds.
		Weight::from_parts(121_050_026, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			// Standard Error: 75_896
			.saturating_add(Weight::from_parts(598_605, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:21 w:21)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5259 + a * (382 ±0) + b * (112 ±0)`
		//  Estimated: `19598 + b * (2581 ±0) + a * (5233 ±0)`
		// Minimum execution time: 335_000 nanoseconds.
		Weight::from_parts(164_351_827, 0u64)
			.saturating_add(Weight::from_proof_size(19598))
			// Standard Error: 616_625
			.saturating_add(Weight::from_parts(22_180_902, 0u64).saturating_mul(a.into()))
			// Standard Error: 997_649
			.saturating_add(Weight::from_parts(7_687_690, 0u64).saturating_mul(b.into()))
			// Standard Error: 120_431
			.saturating_add(Weight::from_parts(569_293, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3057`
		//  Estimated: `12534`
		// Minimum execution time: 118_000 nanoseconds.
		Weight::from_parts(118_753_121, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			// Standard Error: 60_854
			.saturating_add(Weight::from_parts(582_607, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content NextCuratorGroupId (r:1 w:1)
	// Proof: Content NextCuratorGroupId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:0 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 25]`.
	fn create_curator_group(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `924`
		//  Estimated: `3656`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(27_325_363, 0u64)
			.saturating_add(Weight::from_proof_size(3656))
			// Standard Error: 113_702
			.saturating_add(Weight::from_parts(1_497_920, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 25]`.
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2138`
		//  Estimated: `6665`
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_parts(63_826_663, 0u64)
			.saturating_add(Weight::from_proof_size(6665))
			// Standard Error: 105_634
			.saturating_add(Weight::from_parts(2_079_781, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn set_curator_group_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2138`
		//  Estimated: `6665`
		// Minimum execution time: 72_000 nanoseconds.
		Weight::from_parts(77_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6665))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn add_curator_to_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2268`
		//  Estimated: `9315`
		// Minimum execution time: 107_000 nanoseconds.
		Weight::from_parts(110_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9315))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:1)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn remove_curator_from_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2138`
		//  Estimated: `6665`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(122_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6665))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content NextVideoId (r:1 w:1)
	// Proof: Content NextVideoId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:0 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[1, 100]`.
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4788 + b * (113 ±0)`
		//  Estimated: `26367 + b * (2581 ±0)`
		// Minimum execution time: 400_000 nanoseconds.
		Weight::from_parts(265_556_205, 0u64)
			.saturating_add(Weight::from_proof_size(26367))
			// Standard Error: 581_232
			.saturating_add(Weight::from_parts(6_542_710, 0u64).saturating_mul(a.into()))
			// Standard Error: 940_385
			.saturating_add(Weight::from_parts(5_980_878, 0u64).saturating_mul(b.into()))
			// Standard Error: 113_518
			.saturating_add(Weight::from_parts(543_660, 0u64).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content NextVideoId (r:1 w:1)
	// Proof: Content NextVideoId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:0 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	/// The range of component `c` is `[2, 20]`.
	/// The range of component `d` is `[1, 100]`.
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5776 + b * (112 ±0) + c * (191 ±0)`
		//  Estimated: `37028 + c * (2600 ±0) + b * (2581 ±0)`
		// Minimum execution time: 517_000 nanoseconds.
		Weight::from_parts(305_232_632, 0u64)
			.saturating_add(Weight::from_proof_size(37028))
			// Standard Error: 589_264
			.saturating_add(Weight::from_parts(5_726_775, 0u64).saturating_mul(a.into()))
			// Standard Error: 953_604
			.saturating_add(Weight::from_parts(6_587_273, 0u64).saturating_mul(b.into()))
			// Standard Error: 628_126
			.saturating_add(Weight::from_parts(4_084_873, 0u64).saturating_mul(c.into()))
			// Standard Error: 115_109
			.saturating_add(Weight::from_parts(584_352, 0u64).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(31_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3057`
		//  Estimated: `12534`
		// Minimum execution time: 119_000 nanoseconds.
		Weight::from_parts(120_835_663, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			// Standard Error: 41_879
			.saturating_add(Weight::from_parts(437_536, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:40)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:22 w:22)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 20]`.
	/// The range of component `c` is `[1, 13]`.
	/// The range of component `d` is `[1, 100]`.
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5142 + b * (373 ±0) + c * (112 ±0)`
		//  Estimated: `25738 + b * (5233 ±0) + c * (2581 ±0)`
		// Minimum execution time: 495_000 nanoseconds.
		Weight::from_parts(176_355_196, 0u64)
			.saturating_add(Weight::from_proof_size(25738))
			// Standard Error: 1_254_807
			.saturating_add(Weight::from_parts(7_351_758, 0u64).saturating_mul(a.into()))
			// Standard Error: 1_254_807
			.saturating_add(Weight::from_parts(22_429_817, 0u64).saturating_mul(b.into()))
			// Standard Error: 2_030_651
			.saturating_add(Weight::from_parts(9_273_357, 0u64).saturating_mul(c.into()))
			// Standard Error: 245_118
			.saturating_add(Weight::from_parts(288_698, 0u64).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(c.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// The range of component `a` is `[2, 20]`.
	/// The range of component `b` is `[1, 100]`.
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4354 + a * (202 ±0)`
		//  Estimated: `23195 + a * (2600 ±0)`
		// Minimum execution time: 238_000 nanoseconds.
		Weight::from_parts(190_186_913, 0u64)
			.saturating_add(Weight::from_proof_size(23195))
			// Standard Error: 533_557
			.saturating_add(Weight::from_parts(2_952_696, 0u64).saturating_mul(a.into()))
			// Standard Error: 97_683
			.saturating_add(Weight::from_parts(574_741, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:21 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:40)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:22 w:22)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 20]`.
	/// The range of component `c` is `[1, 13]`.
	/// The range of component `d` is `[2, 20]`.
	/// The range of component `e` is `[1, 100]`.
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5717 + b * (416 ±0) + c * (112 ±0) + d * (210 ±0)`
		//  Estimated: `36399 + b * (5233 ±0) + c * (2581 ±0) + d * (2600 ±0)`
		// Minimum execution time: 631_000 nanoseconds.
		Weight::from_parts(334_714_568, 0u64)
			.saturating_add(Weight::from_proof_size(36399))
			// Standard Error: 819_499
			.saturating_add(Weight::from_parts(6_356_482, 0u64).saturating_mul(a.into()))
			// Standard Error: 819_499
			.saturating_add(Weight::from_parts(20_888_831, 0u64).saturating_mul(b.into()))
			// Standard Error: 1_326_813
			.saturating_add(Weight::from_parts(4_705_803, 0u64).saturating_mul(c.into()))
			// Standard Error: 873_515
			.saturating_add(Weight::from_parts(3_305_116, 0u64).saturating_mul(d.into()))
			// Standard Error: 160_143
			.saturating_add(Weight::from_parts(362_536, 0u64).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(29_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(b.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(d.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn delete_video_without_assets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3341`
		//  Estimated: `17740`
		// Minimum execution time: 154_000 nanoseconds.
		Weight::from_parts(155_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17740))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:20 w:20)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: System Account (r:23 w:23)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 20]`.
	/// The range of component `b` is `[1, 13]`.
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5277 + a * (388 ±0) + b * (112 ±0)`
		//  Estimated: `24804 + a * (5233 ±0) + b * (2581 ±0)`
		// Minimum execution time: 317_000 nanoseconds.
		Weight::from_parts(183_610_046, 0u64)
			.saturating_add(Weight::from_proof_size(24804))
			// Standard Error: 537_317
			.saturating_add(Weight::from_parts(22_132_473, 0u64).saturating_mul(a.into()))
			// Standard Error: 868_573
			.saturating_add(Weight::from_parts(8_335_121, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
			.saturating_add(Weight::from_proof_size(5233).saturating_mul(a.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(b.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:11 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content NextTransferId (r:1 w:1)
	// Proof: Content NextTransferId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3635 + a * (200 ±0)`
		//  Estimated: `12649 + a * (2600 ±0)`
		// Minimum execution time: 138_000 nanoseconds.
		Weight::from_parts(140_659_235, 0u64)
			.saturating_add(Weight::from_proof_size(12649))
			// Standard Error: 320_784
			.saturating_add(Weight::from_parts(6_925_159, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn cancel_channel_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3115`
		//  Estimated: `9546`
		// Minimum execution time: 148_000 nanoseconds.
		Weight::from_parts(151_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1810 + a * (31 ±0)`
		//  Estimated: `7048`
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_parts(58_703_821, 0u64)
			.saturating_add(Weight::from_proof_size(7048))
			// Standard Error: 170_361
			.saturating_add(Weight::from_parts(5_624_203, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2872 + a * (31 ±0)`
		//  Estimated: `12251`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(84_149_681, 0u64)
			.saturating_add(Weight::from_proof_size(12251))
			// Standard Error: 331_168
			.saturating_add(Weight::from_parts(5_364_649, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 10]`.
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2470 + a * (57 ±0)`
		//  Estimated: `13790`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(81_321_656, 0u64)
			.saturating_add(Weight::from_proof_size(13790))
			// Standard Error: 283_278
			.saturating_add(Weight::from_parts(5_953_821, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token NextTokenId (r:1 w:1)
	// Proof: Token NextTokenId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1024 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token MaxYearlyPatronageRate (r:1 w:0)
	// Proof: Token MaxYearlyPatronageRate (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:0 w:1024)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:0 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 1024]`.
	fn issue_creator_token(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4911 + a * (165 ±0)`
		//  Estimated: `16265 + a * (2600 ±0)`
		// Minimum execution time: 191_000 nanoseconds.
		Weight::from_parts(95_882_923, 0u64)
			.saturating_add(Weight::from_proof_size(16265))
			// Standard Error: 107_432
			.saturating_add(Weight::from_parts(8_411_005, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:257 w:257)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:256 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 256]`.
	/// The range of component `b` is `[1, 100]`.
	fn creator_token_issuer_transfer(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5392 + a * (167 ±0)`
		//  Estimated: `21054 + a * (5564 ±0)`
		// Minimum execution time: 220_000 nanoseconds.
		Weight::from_parts(177_678_489, 0u64)
			.saturating_add(Weight::from_proof_size(21054))
			// Standard Error: 137_066
			.saturating_add(Weight::from_parts(9_445_581, 0u64).saturating_mul(a.into()))
			// Standard Error: 352_201
			.saturating_add(Weight::from_parts(311_061, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_proof_size(5564).saturating_mul(a.into()))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	fn make_creator_token_permissionless() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3232`
		//  Estimated: `12373`
		// Minimum execution time: 120_000 nanoseconds.
		Weight::from_parts(130_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12373))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	fn deissue_creator_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3199`
		//  Estimated: `12373`
		// Minimum execution time: 138_000 nanoseconds.
		Weight::from_parts(167_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12373))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token MinSaleDuration (r:1 w:0)
	// Proof: Token MinSaleDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	/// The range of component `a` is `[1, 100]`.
	fn init_creator_token_sale(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3698`
		//  Estimated: `15836`
		// Minimum execution time: 131_000 nanoseconds.
		Weight::from_parts(136_992_261, 0u64)
			.saturating_add(Weight::from_proof_size(15836))
			// Standard Error: 65_933
			.saturating_add(Weight::from_parts(539_994, 0u64).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token MinSaleDuration (r:1 w:0)
	// Proof: Token MinSaleDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn update_upcoming_creator_token_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3355`
		//  Estimated: `12872`
		// Minimum execution time: 126_000 nanoseconds.
		Weight::from_parts(132_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12872))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn finalize_creator_token_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4093`
		//  Estimated: `15848`
		// Minimum execution time: 140_000 nanoseconds.
		Weight::from_parts(148_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15848))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token MinAmmSlopeParameter (r:1 w:0)
	// Proof: Token MinAmmSlopeParameter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn activate_amm() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3333`
		//  Estimated: `15487`
		// Minimum execution time: 146_000 nanoseconds.
		Weight::from_parts(147_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15487))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AmmDeactivationThreshold (r:1 w:0)
	// Proof: Token AmmDeactivationThreshold (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:0)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deactivate_amm() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3519`
		//  Estimated: `15475`
		// Minimum execution time: 127_000 nanoseconds.
		Weight::from_parts(130_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15475))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Proof: Token MinRevenueSplitDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	// Proof: Token MinRevenueSplitTimeToStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn issue_revenue_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3983`
		//  Estimated: `19088`
		// Minimum execution time: 161_000 nanoseconds.
		Weight::from_parts(161_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19088))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Proof: Token MinRevenueSplitDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	// Proof: Token MinRevenueSplitTimeToStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn issue_revenue_split_as_collaborator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3302`
		//  Estimated: `20218`
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_parts(95_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(20218))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn finalize_revenue_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3717`
		//  Estimated: `17579`
		// Minimum execution time: 151_000 nanoseconds.
		Weight::from_parts(154_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17579))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3232`
		//  Estimated: `12373`
		// Minimum execution time: 148_000 nanoseconds.
		Weight::from_parts(165_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12373))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	fn claim_creator_token_patronage_credit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2856`
		//  Estimated: `11775`
		// Minimum execution time: 113_000 nanoseconds.
		Weight::from_parts(117_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(11775))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Proof: Storage NextDataObjectId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:1 w:0)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:0 w:1)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	// Storage: Content ChannelCashoutsEnabled (r:0 w:1)
	// Proof: Content ChannelCashoutsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content MaxCashoutAllowed (r:0 w:1)
	// Proof: Content MaxCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinCashoutAllowed (r:0 w:1)
	// Proof: Content MinCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content Commitment (r:0 w:1)
	// Proof: Content Commitment (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	fn update_channel_payouts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `13204`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(81_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(13204))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn withdraw_from_curator_channel_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2218`
		//  Estimated: `9651`
		// Minimum execution time: 67_000 nanoseconds.
		Weight::from_parts(82_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9651))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_from_member_channel_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2267`
		//  Estimated: `11190`
		// Minimum execution time: 60_000 nanoseconds.
		Weight::from_parts(61_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(11190))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelCashoutsEnabled (r:1 w:0)
	// Proof: Content ChannelCashoutsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content MaxCashoutAllowed (r:1 w:0)
	// Proof: Content MaxCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinCashoutAllowed (r:1 w:0)
	// Proof: Content MinCashoutAllowed (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content Commitment (r:1 w:0)
	// Proof: Content Commitment (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `h` is `[1, 10]`.
	fn claim_channel_reward(h: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2341`
		//  Estimated: `11696`
		// Minimum execution time: 93_000 nanoseconds.
		Weight::from_parts(99_663_934, 0u64)
			.saturating_add(Weight::from_proof_size(11696))
			// Standard Error: 924_524
			.saturating_add(Weight::from_parts(237_704, 0u64).saturating_mul(h.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Proof: Content MaxCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Proof: Content MinCreatorRoyalty (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Proof: Content GlobalDailyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Proof: Content GlobalWeeklyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Proof: Content GlobalWeeklyNftCounter (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	/// The range of component `b` is `[1, 100]`.
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4091 + w * (207 ±0)`
		//  Estimated: `20595 + w * (2600 ±0)`
		// Minimum execution time: 235_000 nanoseconds.
		Weight::from_parts(179_837_005, 0u64)
			.saturating_add(Weight::from_proof_size(20595))
			// Standard Error: 268_511
			.saturating_add(Weight::from_parts(3_301_646, 0u64).saturating_mul(w.into()))
			// Standard Error: 49_158
			.saturating_add(Weight::from_parts(534_633, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn destroy_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3082`
		//  Estimated: `12534`
		// Minimum execution time: 166_000 nanoseconds.
		Weight::from_parts(169_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn sling_nft_back() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2407`
		//  Estimated: `8972`
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_parts(47_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(8972))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn offer_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4004`
		//  Estimated: `15134`
		// Minimum execution time: 171_000 nanoseconds.
		Weight::from_parts(176_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(15134))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn cancel_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3107`
		//  Estimated: `12534`
		// Minimum execution time: 165_000 nanoseconds.
		Weight::from_parts(197_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn accept_incoming_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3472`
		//  Estimated: `19880`
		// Minimum execution time: 94_000 nanoseconds.
		Weight::from_parts(94_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19880))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn sell_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3082`
		//  Estimated: `12534`
		// Minimum execution time: 173_000 nanoseconds.
		Weight::from_parts(198_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn cancel_buy_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3098`
		//  Estimated: `12534`
		// Minimum execution time: 157_000 nanoseconds.
		Weight::from_parts(209_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn update_buy_now_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3098`
		//  Estimated: `12534`
		// Minimum execution time: 173_000 nanoseconds.
		Weight::from_parts(184_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn buy_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3463`
		//  Estimated: `19880`
		// Minimum execution time: 95_000 nanoseconds.
		Weight::from_parts(95_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(19880))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content NftLimitsEnabled (r:1 w:1)
	// Proof: Content NftLimitsEnabled (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn toggle_nft_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `496`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(496))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content GlobalDailyNftLimit (r:1 w:1)
	// Proof: Content GlobalDailyNftLimit (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn update_global_nft_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `599`
		//  Estimated: `507`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(507))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn update_channel_nft_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2771`
		//  Estimated: `9546`
		// Minimum execution time: 125_000 nanoseconds.
		Weight::from_parts(157_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Proof: Content MaxAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Proof: Content MinAuctionDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MaxAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Proof: Content MinAuctionExtensionPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Proof: Content MaxBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MinBidStep (r:1 w:0)
	// Proof: Content MinBidStep (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	fn start_english_auction(w: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4069 + w * (215 ±0)`
		//  Estimated: `17073 + w * (2600 ±0)`
		// Minimum execution time: 201_000 nanoseconds.
		Weight::from_parts(194_653_846, 0u64)
			.saturating_add(Weight::from_proof_size(17073))
			// Standard Error: 310_500
			.saturating_add(Weight::from_parts(3_448_717, 0u64).saturating_mul(w.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn cancel_english_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3305`
		//  Estimated: `12534`
		// Minimum execution time: 171_000 nanoseconds.
		Weight::from_parts(181_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:3 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: System Account (r:5 w:5)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn make_english_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4472`
		//  Estimated: `27686`
		// Minimum execution time: 132_000 nanoseconds.
		Weight::from_parts(133_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(27686))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn settle_english_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3355`
		//  Estimated: `17280`
		// Minimum execution time: 91_000 nanoseconds.
		Weight::from_parts(92_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(17280))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Content MaxBidLockDuration (r:1 w:0)
	// Proof: Content MaxBidLockDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinBidLockDuration (r:1 w:0)
	// Proof: Content MinBidLockDuration (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Proof: Content MinStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Proof: Content MaxStartingPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Proof: Content AuctionStartsAtMaxDelta (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `w` is `[2, 20]`.
	fn start_open_auction(w: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3945 + w * (211 ±0)`
		//  Estimated: `15053 + w * (2600 ±0)`
		// Minimum execution time: 189_000 nanoseconds.
		Weight::from_parts(186_497_041, 0u64)
			.saturating_add(Weight::from_proof_size(15053))
			// Standard Error: 285_354
			.saturating_add(Weight::from_parts(3_231_755, 0u64).saturating_mul(w.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(w.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(w.into()))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	fn cancel_open_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3292`
		//  Estimated: `12534`
		// Minimum execution time: 171_000 nanoseconds.
		Weight::from_parts(177_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_open_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3397`
		//  Estimated: `16729`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_parts(79_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(16729))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn pick_open_auction_winner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3688`
		//  Estimated: `22431`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(104_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(22431))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:0)
	// Proof: Content OpenAuctionBidByVideoAndMember (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	// Storage: System Account (r:4 w:4)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Content VideoById (r:1 w:1)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	// Proof: Content PlatfromFeePercentage (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn make_open_auction_bid() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4097`
		//  Estimated: `25034`
		// Minimum execution time: 120_000 nanoseconds.
		Weight::from_parts(123_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(25034))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn channel_owner_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1740`
		//  Estimated: `6537`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_parts(40_900_126, 0u64)
			.saturating_add(Weight::from_proof_size(6537))
			// Standard Error: 54_306
			.saturating_add(Weight::from_parts(511_949, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn channel_agent_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2771`
		//  Estimated: `9546`
		// Minimum execution time: 108_000 nanoseconds.
		Weight::from_parts(106_663_393, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			// Standard Error: 72_808
			.saturating_add(Weight::from_parts(550_530, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Proof: Content VideoById (max_values: None, max_size: Some(513), added: 2988, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn nft_owner_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3305`
		//  Estimated: `12534`
		// Minimum execution time: 146_000 nanoseconds.
		Weight::from_parts(153_516_843, 0u64)
			.saturating_add(Weight::from_proof_size(12534))
			// Standard Error: 70_964
			.saturating_add(Weight::from_parts(471_776, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content ChannelStateBloatBondValue (r:0 w:1)
	// Proof: Content ChannelStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_channel_state_bloat_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371`
		//  Estimated: `3153`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content VideoStateBloatBondValue (r:0 w:1)
	// Proof: Content VideoStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_video_state_bloat_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371`
		//  Estimated: `3153`
		// Minimum execution time: 16_000 nanoseconds.
		Weight::from_parts(21_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Proof: Content ChannelById (max_values: None, max_size: Some(909), added: 3384, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Proof: Content CuratorGroupById (max_values: None, max_size: Some(1037), added: 3512, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 100]`.
	fn creator_token_issuer_remark(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2773`
		//  Estimated: `9546`
		// Minimum execution time: 109_000 nanoseconds.
		Weight::from_parts(109_406_142, 0u64)
			.saturating_add(Weight::from_proof_size(9546))
			// Standard Error: 65_168
			.saturating_add(Weight::from_parts(501_869, 0u64).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_privilege_level() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_curator_group(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_curator_group_status() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_curator_to_group() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn remove_curator_from_group() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_without_assets() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_channel_transfer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_creator_token(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn creator_token_issuer_transfer(a: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_creator_token_permissionless() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn deissue_creator_token() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn init_creator_token_sale(a: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_upcoming_creator_token_sale() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn finalize_creator_token_sale() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn activate_amm() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn deactivate_amm() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_revenue_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_revenue_split_as_collaborator() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn finalize_revenue_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn claim_creator_token_patronage_credit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_payouts() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_from_curator_channel_balance() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_from_member_channel_balance() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn claim_channel_reward(h: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn destroy_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn sling_nft_back() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn offer_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_offer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn accept_incoming_offer() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn sell_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_buy_now() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_buy_now_price() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn buy_nft() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn toggle_nft_limits() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_global_nft_limit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_nft_limit() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn start_english_auction(w: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_english_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_english_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn settle_english_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn start_open_auction(w: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_open_auction() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_open_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn pick_open_auction_winner() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn make_open_auction_bid() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_owner_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn channel_agent_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn nft_owner_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_channel_state_bloat_bond() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_video_state_bloat_bond() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn creator_token_issuer_remark(b: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
