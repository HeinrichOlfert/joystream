// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for storage
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=storage
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/storage/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for storage.
pub trait WeightInfo {
	fn delete_storage_bucket() -> Weight;
	fn update_uploading_blocked_status() -> Weight;
	fn update_data_size_fee() -> Weight;
	fn update_storage_buckets_per_bag_limit() -> Weight;
	fn update_storage_buckets_voucher_max_limits() -> Weight;
	fn update_data_object_state_bloat_bond() -> Weight;
	fn update_number_of_storage_buckets_in_dynamic_bag_creation_policy() -> Weight;
	fn update_blacklist(_i: u32, _j: u32, ) -> Weight;
	fn create_storage_bucket() -> Weight;
	fn update_storage_buckets_for_bag(_i: u32, _j: u32, ) -> Weight;
	fn cancel_storage_bucket_operator_invite() -> Weight;
	fn invite_storage_bucket_operator() -> Weight;
	fn remove_storage_bucket_operator() -> Weight;
	fn update_storage_bucket_status() -> Weight;
	fn set_storage_bucket_voucher_limits() -> Weight;
	fn accept_storage_bucket_invitation() -> Weight;
	fn set_storage_operator_metadata(_i: u32, ) -> Weight;
	fn accept_pending_data_objects(_i: u32, ) -> Weight;
	fn create_distribution_bucket_family() -> Weight;
	fn delete_distribution_bucket_family() -> Weight;
	fn create_distribution_bucket() -> Weight;
	fn update_distribution_bucket_status() -> Weight;
	fn delete_distribution_bucket() -> Weight;
	fn update_distribution_buckets_for_bag(_i: u32, _j: u32, ) -> Weight;
	fn update_distribution_buckets_per_bag_limit() -> Weight;
	fn update_distribution_bucket_mode() -> Weight;
	fn update_families_in_dynamic_bag_creation_policy(_i: u32, ) -> Weight;
	fn invite_distribution_bucket_operator() -> Weight;
	fn cancel_distribution_bucket_operator_invite() -> Weight;
	fn remove_distribution_bucket_operator() -> Weight;
	fn set_distribution_bucket_family_metadata(_i: u32, ) -> Weight;
	fn accept_distribution_bucket_invitation() -> Weight;
	fn set_distribution_operator_metadata(_i: u32, ) -> Weight;
	fn storage_operator_remark(_i: u32, ) -> Weight;
	fn distribution_operator_remark(_i: u32, ) -> Weight;
}

/// Weights for storage using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn delete_storage_bucket() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `698`
		//  Estimated: `5734`
		// Minimum execution time: 36_148 nanoseconds.
		Weight::from_ref_time(37_145_000)
			.saturating_add(Weight::from_proof_size(5734))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage UploadingBlocked (r:0 w:1)
	// Proof: Storage UploadingBlocked (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn update_uploading_blocked_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3153`
		// Minimum execution time: 27_706 nanoseconds.
		Weight::from_ref_time(28_400_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DataObjectPerMegabyteFee (r:0 w:1)
	// Proof: Storage DataObjectPerMegabyteFee (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_data_size_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3153`
		// Minimum execution time: 28_265 nanoseconds.
		Weight::from_ref_time(28_647_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketsPerBagLimit (r:0 w:1)
	// Proof: Storage StorageBucketsPerBagLimit (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn update_storage_buckets_per_bag_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3153`
		// Minimum execution time: 27_905 nanoseconds.
		Weight::from_ref_time(28_418_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsSizeLimit (r:0 w:1)
	// Proof: Storage VoucherMaxObjectsSizeLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsNumberLimit (r:0 w:1)
	// Proof: Storage VoucherMaxObjectsNumberLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_storage_buckets_voucher_max_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3153`
		// Minimum execution time: 29_650 nanoseconds.
		Weight::from_ref_time(30_113_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DataObjectStateBloatBondValue (r:0 w:1)
	// Proof: Storage DataObjectStateBloatBondValue (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_data_object_state_bloat_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3153`
		// Minimum execution time: 28_311 nanoseconds.
		Weight::from_ref_time(28_751_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DynamicBagCreationPolicies (r:1 w:1)
	// Proof: Storage DynamicBagCreationPolicies (max_values: None, max_size: Some(634), added: 3109, mode: MaxEncodedLen)
	fn update_number_of_storage_buckets_in_dynamic_bag_creation_policy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `550`
		//  Estimated: `6262`
		// Minimum execution time: 34_526 nanoseconds.
		Weight::from_ref_time(35_285_000)
			.saturating_add(Weight::from_proof_size(6262))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage Blacklist (r:2000 w:1000)
	// Proof: Storage Blacklist (max_values: None, max_size: Some(63), added: 2538, mode: MaxEncodedLen)
	// Storage: Storage CurrentBlacklistSize (r:1 w:1)
	// Proof: Storage CurrentBlacklistSize (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 1000]`.
	/// The range of component `j` is `[0, 1000]`.
	fn update_blacklist(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `3656 + i * (2538 ±0) + j * (2538 ±0)`
		// Minimum execution time: 2_277_081 nanoseconds.
		Weight::from_ref_time(37_100_067)
			.saturating_add(Weight::from_proof_size(3656))
			// Standard Error: 8_106
			.saturating_add(Weight::from_ref_time(4_840_366).saturating_mul(i.into()))
			// Standard Error: 8_106
			.saturating_add(Weight::from_ref_time(2_238_599).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2538).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2538).saturating_mul(j.into()))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsSizeLimit (r:1 w:0)
	// Proof: Storage VoucherMaxObjectsSizeLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsNumberLimit (r:1 w:0)
	// Proof: Storage VoucherMaxObjectsNumberLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage NextStorageBucketId (r:1 w:1)
	// Proof: Storage NextStorageBucketId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:0 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn create_storage_bucket() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553`
		//  Estimated: `4662`
		// Minimum execution time: 38_956 nanoseconds.
		Weight::from_ref_time(39_840_000)
			.saturating_add(Weight::from_proof_size(4662))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketsPerBagLimit (r:1 w:0)
	// Proof: Storage StorageBucketsPerBagLimit (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:26 w:26)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 13]`.
	/// The range of component `j` is `[1, 13]`.
	fn update_storage_buckets_for_bag(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `698 + i * (105 ±0) + j * (113 ±0)`
		//  Estimated: `7091 + i * (2581 ±0) + j * (2581 ±0)`
		// Minimum execution time: 276_487 nanoseconds.
		Weight::from_ref_time(57_000_798)
			.saturating_add(Weight::from_proof_size(7091))
			// Standard Error: 28_853
			.saturating_add(Weight::from_ref_time(17_356_577).saturating_mul(i.into()))
			// Standard Error: 28_853
			.saturating_add(Weight::from_ref_time(15_858_971).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2581).saturating_mul(j.into()))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn cancel_storage_bucket_operator_invite() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `743`
		//  Estimated: `5734`
		// Minimum execution time: 39_376 nanoseconds.
		Weight::from_ref_time(40_082_000)
			.saturating_add(Weight::from_proof_size(5734))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn invite_storage_bucket_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `896`
		//  Estimated: `8384`
		// Minimum execution time: 43_209 nanoseconds.
		Weight::from_ref_time(44_193_000)
			.saturating_add(Weight::from_proof_size(8384))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn remove_storage_bucket_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `5734`
		// Minimum execution time: 39_169 nanoseconds.
		Weight::from_ref_time(40_197_000)
			.saturating_add(Weight::from_proof_size(5734))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn update_storage_bucket_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `698`
		//  Estimated: `5734`
		// Minimum execution time: 37_308 nanoseconds.
		Weight::from_ref_time(38_210_000)
			.saturating_add(Weight::from_proof_size(5734))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance2WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsSizeLimit (r:1 w:0)
	// Proof: Storage VoucherMaxObjectsSizeLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage VoucherMaxObjectsNumberLimit (r:1 w:0)
	// Proof: Storage VoucherMaxObjectsNumberLimit (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn set_storage_bucket_voucher_limits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `756`
		//  Estimated: `6740`
		// Minimum execution time: 42_513 nanoseconds.
		Weight::from_ref_time(43_529_000)
			.saturating_add(Weight::from_proof_size(6740))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:1)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	fn accept_storage_bucket_invitation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `743`
		//  Estimated: `5231`
		// Minimum execution time: 37_978 nanoseconds.
		Weight::from_ref_time(39_368_000)
			.saturating_add(Weight::from_proof_size(5231))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:0)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 1000]`.
	fn set_storage_operator_metadata(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `5231`
		// Minimum execution time: 37_127 nanoseconds.
		Weight::from_ref_time(27_402_643)
			.saturating_add(Weight::from_proof_size(5231))
			// Standard Error: 1_443
			.saturating_add(Weight::from_ref_time(1_301_891).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Storage StorageBucketById (r:1 w:0)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:0)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DataObjectsById (r:400 w:400)
	// Proof: Storage DataObjectsById (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 400]`.
	fn accept_pending_data_objects(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + i * (136 ±0)`
		//  Estimated: `6020 + i * (2630 ±0)`
		// Minimum execution time: 46_873 nanoseconds.
		Weight::from_ref_time(47_267_000)
			.saturating_add(Weight::from_proof_size(6020))
			// Standard Error: 43_587
			.saturating_add(Weight::from_ref_time(13_671_351).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2630).saturating_mul(i.into()))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyNumber (r:1 w:1)
	// Proof: Storage DistributionBucketFamilyNumber (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage NextDistributionBucketFamilyId (r:1 w:1)
	// Proof: Storage NextDistributionBucketFamilyId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:0 w:1)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	fn create_distribution_bucket_family() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517`
		//  Estimated: `4159`
		// Minimum execution time: 37_172 nanoseconds.
		Weight::from_ref_time(37_880_000)
			.saturating_add(Weight::from_proof_size(4159))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:1 w:1)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:0)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	// Storage: Storage DynamicBagCreationPolicies (r:2 w:0)
	// Proof: Storage DynamicBagCreationPolicies (max_values: None, max_size: Some(634), added: 3109, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyNumber (r:1 w:1)
	// Proof: Storage DistributionBucketFamilyNumber (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn delete_distribution_bucket_family() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `15236`
		// Minimum execution time: 51_929 nanoseconds.
		Weight::from_ref_time(53_120_000)
			.saturating_add(Weight::from_proof_size(15236))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:1 w:1)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:0 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn create_distribution_bucket() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `5660`
		// Minimum execution time: 41_988 nanoseconds.
		Weight::from_ref_time(42_624_000)
			.saturating_add(Weight::from_proof_size(5660))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn update_distribution_bucket_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `6008`
		// Minimum execution time: 41_267 nanoseconds.
		Weight::from_ref_time(42_117_000)
			.saturating_add(Weight::from_proof_size(6008))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn delete_distribution_bucket() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `6008`
		// Minimum execution time: 40_103 nanoseconds.
		Weight::from_ref_time(41_953_000)
			.saturating_add(Weight::from_proof_size(6008))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage Bags (r:1 w:1)
	// Proof: Storage Bags (max_values: None, max_size: Some(964), added: 3439, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:1 w:0)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketsPerBagLimit (r:1 w:0)
	// Proof: Storage DistributionBucketsPerBagLimit (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:102 w:102)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 51]`.
	/// The range of component `j` is `[1, 51]`.
	fn update_distribution_buckets_for_bag(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `745 + i * (41 ±0) + j * (57 ±0)`
		//  Estimated: `9598 + i * (2855 ±0) + j * (2855 ±0)`
		// Minimum execution time: 638_008 nanoseconds.
		Weight::from_ref_time(53_350_370)
			.saturating_add(Weight::from_proof_size(9598))
			// Standard Error: 27_112
			.saturating_add(Weight::from_ref_time(11_512_011).saturating_mul(i.into()))
			// Standard Error: 27_112
			.saturating_add(Weight::from_ref_time(11_805_404).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2855).saturating_mul(j.into()))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketsPerBagLimit (r:0 w:1)
	// Proof: Storage DistributionBucketsPerBagLimit (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn update_distribution_buckets_per_bag_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `404`
		//  Estimated: `3153`
		// Minimum execution time: 27_786 nanoseconds.
		Weight::from_ref_time(28_324_000)
			.saturating_add(Weight::from_proof_size(3153))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn update_distribution_bucket_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `6008`
		// Minimum execution time: 40_952 nanoseconds.
		Weight::from_ref_time(41_627_000)
			.saturating_add(Weight::from_proof_size(6008))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:7 w:0)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	// Storage: Storage DynamicBagCreationPolicies (r:1 w:1)
	// Proof: Storage DynamicBagCreationPolicies (max_values: None, max_size: Some(634), added: 3109, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 7]`.
	fn update_families_in_dynamic_bag_creation_policy(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577 + i * (36 ±0)`
		//  Estimated: `6262 + i * (2507 ±0)`
		// Minimum execution time: 47_344 nanoseconds.
		Weight::from_ref_time(38_574_738)
			.saturating_add(Weight::from_proof_size(6262))
			// Standard Error: 16_162
			.saturating_add(Weight::from_ref_time(5_223_673).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2507).saturating_mul(i.into()))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn invite_distribution_bucket_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `869`
		//  Estimated: `8658`
		// Minimum execution time: 47_617 nanoseconds.
		Weight::from_ref_time(48_650_000)
			.saturating_add(Weight::from_proof_size(8658))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn cancel_distribution_bucket_operator_invite() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `6008`
		// Minimum execution time: 43_921 nanoseconds.
		Weight::from_ref_time(44_471_000)
			.saturating_add(Weight::from_proof_size(6008))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn remove_distribution_bucket_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `6008`
		// Minimum execution time: 43_723 nanoseconds.
		Weight::from_ref_time(44_626_000)
			.saturating_add(Weight::from_proof_size(6008))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance9WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketFamilyById (r:1 w:0)
	// Proof: Storage DistributionBucketFamilyById (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 1000]`.
	fn set_distribution_bucket_family_metadata(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609`
		//  Estimated: `5660`
		// Minimum execution time: 37_169 nanoseconds.
		Weight::from_ref_time(29_571_585)
			.saturating_add(Weight::from_proof_size(5660))
			// Standard Error: 2_108
			.saturating_add(Weight::from_ref_time(1_304_414).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:1)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	fn accept_distribution_bucket_invitation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `5505`
		// Minimum execution time: 43_061 nanoseconds.
		Weight::from_ref_time(43_643_000)
			.saturating_add(Weight::from_proof_size(5505))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:0)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 1000]`.
	fn set_distribution_operator_metadata(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `5505`
		// Minimum execution time: 40_447 nanoseconds.
		Weight::from_ref_time(30_665_028)
			.saturating_add(Weight::from_proof_size(5505))
			// Standard Error: 4_420
			.saturating_add(Weight::from_ref_time(1_307_577).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Instance2WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance2WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage StorageBucketById (r:1 w:0)
	// Proof: Storage StorageBucketById (max_values: None, max_size: Some(106), added: 2581, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 1000]`.
	fn storage_operator_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `776`
		//  Estimated: `5231`
		// Minimum execution time: 36_997 nanoseconds.
		Weight::from_ref_time(27_384_630)
			.saturating_add(Weight::from_proof_size(5231))
			// Standard Error: 1_163
			.saturating_add(Weight::from_ref_time(1_294_171).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Instance9WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance9WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Storage DistributionBucketByFamilyIdById (r:1 w:0)
	// Proof: Storage DistributionBucketByFamilyIdById (max_values: None, max_size: Some(380), added: 2855, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 1000]`.
	fn distribution_operator_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `716`
		//  Estimated: `5505`
		// Minimum execution time: 40_420 nanoseconds.
		Weight::from_ref_time(33_242_070)
			.saturating_add(Weight::from_proof_size(5505))
			// Standard Error: 1_473
			.saturating_add(Weight::from_ref_time(1_290_246).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn delete_storage_bucket() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_uploading_blocked_status() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_data_size_fee() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_storage_buckets_per_bag_limit() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_storage_buckets_voucher_max_limits() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_data_object_state_bloat_bond() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_number_of_storage_buckets_in_dynamic_bag_creation_policy() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_blacklist(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_storage_bucket() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_storage_buckets_for_bag(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn cancel_storage_bucket_operator_invite() -> Weight {
		Weight::from_ref_time(0)
	}
	fn invite_storage_bucket_operator() -> Weight {
		Weight::from_ref_time(0)
	}
	fn remove_storage_bucket_operator() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_storage_bucket_status() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_storage_bucket_voucher_limits() -> Weight {
		Weight::from_ref_time(0)
	}
	fn accept_storage_bucket_invitation() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_storage_operator_metadata(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn accept_pending_data_objects(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_distribution_bucket_family() -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_distribution_bucket_family() -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_distribution_bucket() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_distribution_bucket_status() -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_distribution_bucket() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_distribution_buckets_for_bag(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_distribution_buckets_per_bag_limit() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_distribution_bucket_mode() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_families_in_dynamic_bag_creation_policy(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn invite_distribution_bucket_operator() -> Weight {
		Weight::from_ref_time(0)
	}
	fn cancel_distribution_bucket_operator_invite() -> Weight {
		Weight::from_ref_time(0)
	}
	fn remove_distribution_bucket_operator() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_distribution_bucket_family_metadata(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn accept_distribution_bucket_invitation() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_distribution_operator_metadata(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn storage_operator_remark(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn distribution_operator_remark(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
