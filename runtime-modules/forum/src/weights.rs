// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for forum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-15, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=forum
// --extrinsic=*
// --chain=prod-test
// --steps=2
// --repeat=2
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/forum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for forum.
pub trait WeightInfo {
	fn create_category(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn update_category_membership_of_moderator_new() -> Weight;
	fn update_category_membership_of_moderator_old() -> Weight;
	fn update_category_archival_status_lead(_i: u32, ) -> Weight;
	fn update_category_archival_status_moderator(_i: u32, ) -> Weight;
	fn update_category_title_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_title_moderator(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_category_lead(_i: u32, ) -> Weight;
	fn delete_category_moderator(_i: u32, ) -> Weight;
	fn create_thread(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn edit_thread_metadata(_i: u32, _j: u32, ) -> Weight;
	fn delete_thread(_i: u32, ) -> Weight;
	fn move_thread_to_category_lead(_i: u32, ) -> Weight;
	fn move_thread_to_category_moderator(_i: u32, ) -> Weight;
	fn moderate_thread_lead(_i: u32, _k: u32, ) -> Weight;
	fn moderate_thread_moderator(_i: u32, _k: u32, ) -> Weight;
	fn add_post(_i: u32, _j: u32, ) -> Weight;
	fn edit_post_text(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_lead(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_posts(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn set_stickied_threads_lead(_i: u32, _j: u32, ) -> Weight;
	fn set_stickied_threads_moderator(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for forum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextCategoryId (r:1 w:1)
	// Proof: Forum_1_1 NextCategoryId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `432 + i * (144 ±0)`
		//  Estimated: `4159 + i * (2746 ±0)`
		// Minimum execution time: 194_000 nanoseconds.
		Weight::from_ref_time(37_450_000)
			.saturating_add(Weight::from_proof_size(4159))
			// Standard Error: 1_639_740
			.saturating_add(Weight::from_ref_time(4_050_000).saturating_mul(i.into()))
			// Standard Error: 81_987
			.saturating_add(Weight::from_ref_time(1_372_500).saturating_mul(j.into()))
			// Standard Error: 81_987
			.saturating_add(Weight::from_ref_time(1_407_500).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:0 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `5899`
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(Weight::from_proof_size(5899))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:1 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_old() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735`
		//  Estimated: `8422`
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_ref_time(30_000_000)
			.saturating_add(Weight::from_proof_size(8422))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(23_700_000)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 141_421
			.saturating_add(Weight::from_ref_time(2_800_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(21_900_000)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 141_421
			.saturating_add(Weight::from_ref_time(4_600_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(23_100_000)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 439_696
			.saturating_add(Weight::from_ref_time(3_400_000).saturating_mul(i.into()))
			// Standard Error: 22_206
			.saturating_add(Weight::from_ref_time(1_237_373).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_ref_time(16_100_000)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 115_470
			.saturating_add(Weight::from_ref_time(5_900_000).saturating_mul(i.into()))
			// Standard Error: 5_831
			.saturating_add(Weight::from_ref_time(1_297_979).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(27_700_000)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 115_470
			.saturating_add(Weight::from_ref_time(2_300_000).saturating_mul(i.into()))
			// Standard Error: 5_831
			.saturating_add(Weight::from_ref_time(1_242_424).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 182_574
			.saturating_add(Weight::from_ref_time(4_500_000).saturating_mul(i.into()))
			// Standard Error: 9_220
			.saturating_add(Weight::from_ref_time(1_227_272).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507 + i * (151 ±0)`
		//  Estimated: `3656 + i * (2746 ±0)`
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(19_900_000)
			.saturating_add(Weight::from_proof_size(3656))
			// Standard Error: 100_000
			.saturating_add(Weight::from_ref_time(4_100_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:5 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[3, 6]`.
	fn delete_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `580 + i * (151 ±0)`
		//  Estimated: `8199 + i * (3755 ±0)`
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(Weight::from_proof_size(8199))
			// Standard Error: 333_333
			.saturating_add(Weight::from_ref_time(4_666_666).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(3755).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextThreadId (r:1 w:1)
	// Proof: Forum_1_1 NextThreadId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `684 + i * (151 ±0)`
		//  Estimated: `11408 + i * (2746 ±0)`
		// Minimum execution time: 145_000 nanoseconds.
		Weight::from_ref_time(91_400_000)
			.saturating_add(Weight::from_proof_size(11408))
			// Standard Error: 1_636_306
			.saturating_add(Weight::from_ref_time(2_100_000).saturating_mul(i.into()))
			// Standard Error: 81_815
			.saturating_add(Weight::from_ref_time(435_000).saturating_mul(j.into()))
			// Standard Error: 81_815
			.saturating_add(Weight::from_ref_time(1_465_000).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `637 + i * (151 ±0)`
		//  Estimated: `5196 + i * (2746 ±0)`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(20_200_000)
			.saturating_add(Weight::from_proof_size(5196))
			// Standard Error: 1_675_310
			.saturating_add(Weight::from_ref_time(3_300_000).saturating_mul(i.into()))
			// Standard Error: 83_765
			.saturating_add(Weight::from_ref_time(555_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_thread(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `948 + i * (151 ±0)`
		//  Estimated: `10402 + i * (2746 ±0)`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(44_900_000)
			.saturating_add(Weight::from_proof_size(10402))
			// Standard Error: 316_227
			.saturating_add(Weight::from_ref_time(3_600_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `859 + i * (122 ±0)`
		//  Estimated: `9044 + i * (2197 ±0)`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(36_100_000)
			.saturating_add(Weight::from_proof_size(9044))
			// Standard Error: 100_000
			.saturating_add(Weight::from_ref_time(3_900_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2197).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:7 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:7 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `925 + i * (187 ±0)`
		//  Estimated: `10515 + i * (5269 ±0)`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(41_800_000)
			.saturating_add(Weight::from_proof_size(10515))
			// Standard Error: 223_606
			.saturating_add(Weight::from_ref_time(6_700_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + i * (151 ±0)`
		//  Estimated: `8352 + i * (2746 ±0)`
		// Minimum execution time: 62_000 nanoseconds.
		Weight::from_ref_time(45_100_000)
			.saturating_add(Weight::from_proof_size(8352))
			// Standard Error: 1_677_299
			.saturating_add(Weight::from_ref_time(2_900_000).saturating_mul(i.into()))
			// Standard Error: 83_864
			.saturating_add(Weight::from_ref_time(545_000).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `896 + i * (151 ±0)`
		//  Estimated: `7849 + i * (5269 ±0)`
		// Minimum execution time: 72_000 nanoseconds.
		Weight::from_ref_time(45_000_000)
			.saturating_add(Weight::from_proof_size(7849))
			// Standard Error: 1_675_310
			.saturating_add(Weight::from_ref_time(4_500_000).saturating_mul(i.into()))
			// Standard Error: 83_765
			.saturating_add(Weight::from_ref_time(545_000).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn add_post(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `981 + i * (151 ±0)`
		//  Estimated: `10905 + i * (2746 ±0)`
		// Minimum execution time: 78_000 nanoseconds.
		Weight::from_ref_time(58_200_000)
			.saturating_add(Weight::from_proof_size(10905))
			// Standard Error: 752_772
			.saturating_add(Weight::from_ref_time(3_300_000).saturating_mul(i.into()))
			// Standard Error: 37_638
			.saturating_add(Weight::from_ref_time(1_560_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `816 + i * (151 ±0)`
		//  Estimated: `7820 + i * (2746 ±0)`
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(Weight::from_proof_size(7820))
			// Standard Error: 1_754_992
			.saturating_add(Weight::from_ref_time(3_000_000).saturating_mul(i.into()))
			// Standard Error: 87_749
			.saturating_add(Weight::from_ref_time(1_575_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1035 + i * (151 ±0)`
		//  Estimated: `10976 + i * (2746 ±0)`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_ref_time(51_700_000)
			.saturating_add(Weight::from_proof_size(10976))
			// Standard Error: 1_792_577
			.saturating_add(Weight::from_ref_time(4_300_000).saturating_mul(i.into()))
			// Standard Error: 89_628
			.saturating_add(Weight::from_ref_time(565_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1108 + i * (151 ±0)`
		//  Estimated: `10473 + i * (5269 ±0)`
		// Minimum execution time: 87_000 nanoseconds.
		Weight::from_ref_time(56_200_000)
			.saturating_add(Weight::from_proof_size(10473))
			// Standard Error: 1_870_828
			.saturating_add(Weight::from_ref_time(5_300_000).saturating_mul(i.into()))
			// Standard Error: 93_541
			.saturating_add(Weight::from_ref_time(555_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:20 w:20)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[1, 20]`.
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097 + i * (151 ±0) + k * (132 ±0)`
		//  Estimated: `10402 + k * (2624 ±0) + i * (2746 ±0)`
		// Minimum execution time: 126_000 nanoseconds.
		Weight::from_ref_time(126_000_000)
			.saturating_add(Weight::from_proof_size(10402))
			// Standard Error: 6_233_050
			.saturating_add(Weight::from_ref_time(7_382_472).saturating_mul(i.into()))
			// Standard Error: 1_780_788
			.saturating_add(Weight::from_ref_time(31_743_476).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_proof_size(2624).saturating_mul(k.into()))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `507 + i * (151 ±0) + j * (107 ±0)`
		//  Estimated: `3282 + j * (2590 ±0) + i * (2746 ±0)`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(20_600_000)
			.saturating_add(Weight::from_proof_size(3282))
			// Standard Error: 230_940
			.saturating_add(Weight::from_ref_time(3_400_000).saturating_mul(i.into()))
			// Standard Error: 57_735
			.saturating_add(Weight::from_ref_time(4_250_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2590).saturating_mul(j.into()))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577 + i * (151 ±0) + j * (107 ±0)`
		//  Estimated: `2779 + i * (5269 ±0) + j * (2590 ±0)`
		// Minimum execution time: 49_000 nanoseconds.
		Weight::from_ref_time(24_300_000)
			.saturating_add(Weight::from_proof_size(2779))
			// Standard Error: 496_655
			.saturating_add(Weight::from_ref_time(4_200_000).saturating_mul(i.into()))
			// Standard Error: 124_163
			.saturating_add(Weight::from_ref_time(4_225_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2590).saturating_mul(j.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_membership_of_moderator_new() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_membership_of_moderator_old() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_category_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_category_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_thread(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn add_post(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
