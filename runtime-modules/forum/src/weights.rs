// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for forum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=forum
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/forum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for forum.
pub trait WeightInfo {
	fn create_category(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn update_category_membership_of_moderator_new() -> Weight;
	fn update_category_membership_of_moderator_old() -> Weight;
	fn update_category_archival_status_lead(_i: u32, ) -> Weight;
	fn update_category_archival_status_moderator(_i: u32, ) -> Weight;
	fn update_category_title_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_title_moderator(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_category_lead(_i: u32, ) -> Weight;
	fn delete_category_moderator(_i: u32, ) -> Weight;
	fn create_thread(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn edit_thread_metadata(_i: u32, _j: u32, ) -> Weight;
	fn delete_thread(_i: u32, ) -> Weight;
	fn move_thread_to_category_lead(_i: u32, ) -> Weight;
	fn move_thread_to_category_moderator(_i: u32, ) -> Weight;
	fn moderate_thread_lead(_i: u32, _k: u32, ) -> Weight;
	fn moderate_thread_moderator(_i: u32, _k: u32, ) -> Weight;
	fn add_post(_i: u32, _j: u32, ) -> Weight;
	fn edit_post_text(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_lead(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_posts(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn set_stickied_threads_lead(_i: u32, _j: u32, ) -> Weight;
	fn set_stickied_threads_moderator(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for forum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextCategoryId (r:1 w:1)
	// Proof: Forum_1_1 NextCategoryId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `396 + i * (150 ±0)`
		//  Estimated: `4159 + i * (2746 ±0)`
		// Minimum execution time: 186_000 nanoseconds.
		Weight::from_parts(30_579_736, 0u64)
			.saturating_add(Weight::from_parts(0, 4159))
			// Standard Error: 76_645
			.saturating_add(Weight::from_parts(4_253_501, 0u64).saturating_mul(i.into()))
			// Standard Error: 4_260
			.saturating_add(Weight::from_parts(1_330_039, 0u64).saturating_mul(j.into()))
			// Standard Error: 4_260
			.saturating_add(Weight::from_parts(1_419_548, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:0 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `5899`
		// Minimum execution time: 27_000 nanoseconds.
		Weight::from_parts(28_000_000, 0u64)
			.saturating_add(Weight::from_parts(0, 5899))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:1 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_old() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735`
		//  Estimated: `8422`
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_parts(29_000_000, 0u64)
			.saturating_add(Weight::from_parts(0, 8422))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(20_692_665, 0u64)
			.saturating_add(Weight::from_parts(0, 3153))
			// Standard Error: 17_186
			.saturating_add(Weight::from_parts(3_017_660, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_parts(21_079_786, 0u64)
			.saturating_add(Weight::from_parts(0, 2650))
			// Standard Error: 14_596
			.saturating_add(Weight::from_parts(4_488_150, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(22_155_472, 0u64)
			.saturating_add(Weight::from_parts(0, 3153))
			// Standard Error: 20_349
			.saturating_add(Weight::from_parts(2_942_890, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_139
			.saturating_add(Weight::from_parts(1_230_997, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_parts(21_615_783, 0u64)
			.saturating_add(Weight::from_parts(0, 2650))
			// Standard Error: 31_631
			.saturating_add(Weight::from_parts(4_452_462, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_771
			.saturating_add(Weight::from_parts(1_230_855, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_parts(22_914_421, 0u64)
			.saturating_add(Weight::from_parts(0, 3153))
			// Standard Error: 31_468
			.saturating_add(Weight::from_parts(2_881_034, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_762
			.saturating_add(Weight::from_parts(1_218_201, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_parts(20_758_992, 0u64)
			.saturating_add(Weight::from_parts(0, 2650))
			// Standard Error: 29_519
			.saturating_add(Weight::from_parts(4_462_850, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_653
			.saturating_add(Weight::from_parts(1_242_812, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3656 + i * (2746 ±0)`
		// Minimum execution time: 22_000 nanoseconds.
		Weight::from_parts(20_436_044, 0u64)
			.saturating_add(Weight::from_parts(0, 3656))
			// Standard Error: 38_911
			.saturating_add(Weight::from_parts(3_958_925, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:5 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[3, 6]`.
	fn delete_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `578 + i * (151 ±0)`
		//  Estimated: `8199 + i * (3469 ±0)`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(22_598_593, 0u64)
			.saturating_add(Weight::from_parts(0, 8199))
			// Standard Error: 26_804
			.saturating_add(Weight::from_parts(4_634_180, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3469).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextThreadId (r:1 w:1)
	// Proof: Forum_1_1 NextThreadId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686 + i * (151 ±0)`
		//  Estimated: `11408 + i * (2746 ±0)`
		// Minimum execution time: 134_000 nanoseconds.
		Weight::from_parts(68_036_244, 0u64)
			.saturating_add(Weight::from_parts(0, 11408))
			// Standard Error: 84_022
			.saturating_add(Weight::from_parts(4_221_965, 0u64).saturating_mul(i.into()))
			// Standard Error: 4_670
			.saturating_add(Weight::from_parts(404_596, 0u64).saturating_mul(j.into()))
			// Standard Error: 4_670
			.saturating_add(Weight::from_parts(1_495_673, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `639 + i * (151 ±0)`
		//  Estimated: `5196 + i * (2746 ±0)`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(19_266_326, 0u64)
			.saturating_add(Weight::from_parts(0, 5196))
			// Standard Error: 22_515
			.saturating_add(Weight::from_parts(3_262_279, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_246
			.saturating_add(Weight::from_parts(485_149, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_thread(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `950 + i * (151 ±0)`
		//  Estimated: `10402 + i * (2746 ±0)`
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_parts(45_982_701, 0u64)
			.saturating_add(Weight::from_parts(0, 10402))
			// Standard Error: 29_880
			.saturating_add(Weight::from_parts(2_796_456, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `690 + i * (150 ±0)`
		//  Estimated: `7894 + i * (2218 ±24)`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(33_246_523, 0u64)
			.saturating_add(Weight::from_parts(0, 7894))
			// Standard Error: 45_296
			.saturating_add(Weight::from_parts(4_005_124, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2218).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:7 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:7 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `913 + i * (185 ±0)`
		//  Estimated: `10515 + i * (5269 ±0)`
		// Minimum execution time: 45_000 nanoseconds.
		Weight::from_parts(39_551_247, 0u64)
			.saturating_add(Weight::from_parts(0, 10515))
			// Standard Error: 20_469
			.saturating_add(Weight::from_parts(6_553_229, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825 + i * (151 ±0)`
		//  Estimated: `8352 + i * (2746 ±0)`
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_parts(42_528_604, 0u64)
			.saturating_add(Weight::from_parts(0, 8352))
			// Standard Error: 27_779
			.saturating_add(Weight::from_parts(2_993_828, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_537
			.saturating_add(Weight::from_parts(489_970, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `898 + i * (151 ±0)`
		//  Estimated: `7849 + i * (5269 ±0)`
		// Minimum execution time: 68_000 nanoseconds.
		Weight::from_parts(44_833_420, 0u64)
			.saturating_add(Weight::from_parts(0, 7849))
			// Standard Error: 30_313
			.saturating_add(Weight::from_parts(4_298_163, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_677
			.saturating_add(Weight::from_parts(471_506, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn add_post(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `983 + i * (151 ±0)`
		//  Estimated: `10905 + i * (2746 ±0)`
		// Minimum execution time: 76_000 nanoseconds.
		Weight::from_parts(61_779_634, 0u64)
			.saturating_add(Weight::from_parts(0, 10905))
			// Standard Error: 45_267
			.saturating_add(Weight::from_parts(2_596_760, 0u64).saturating_mul(i.into()))
			// Standard Error: 2_505
			.saturating_add(Weight::from_parts(1_481_594, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818 + i * (151 ±0)`
		//  Estimated: `7820 + i * (2746 ±0)`
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_parts(29_519_355, 0u64)
			.saturating_add(Weight::from_parts(0, 7820))
			// Standard Error: 37_549
			.saturating_add(Weight::from_parts(3_035_610, 0u64).saturating_mul(i.into()))
			// Standard Error: 2_078
			.saturating_add(Weight::from_parts(1_497_646, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037 + i * (151 ±0)`
		//  Estimated: `10976 + i * (2746 ±0)`
		// Minimum execution time: 74_000 nanoseconds.
		Weight::from_parts(52_542_031, 0u64)
			.saturating_add(Weight::from_parts(0, 10976))
			// Standard Error: 27_388
			.saturating_add(Weight::from_parts(3_891_797, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_516
			.saturating_add(Weight::from_parts(469_715, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110 + i * (151 ±0)`
		//  Estimated: `10473 + i * (5269 ±0)`
		// Minimum execution time: 83_000 nanoseconds.
		Weight::from_parts(52_450_646, 0u64)
			.saturating_add(Weight::from_parts(0, 10473))
			// Standard Error: 29_042
			.saturating_add(Weight::from_parts(5_381_752, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_607
			.saturating_add(Weight::from_parts(474_634, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:20 w:20)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[1, 20]`.
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1100 + i * (151 ±0) + k * (132 ±0)`
		//  Estimated: `10402 + i * (2746 ±0) + k * (2624 ±0)`
		// Minimum execution time: 113_000 nanoseconds.
		Weight::from_parts(115_000_000, 0u64)
			.saturating_add(Weight::from_parts(0, 10402))
			// Standard Error: 291_905
			.saturating_add(Weight::from_parts(9_574_465, 0u64).saturating_mul(i.into()))
			// Standard Error: 86_006
			.saturating_add(Weight::from_parts(31_578_048, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
			.saturating_add(Weight::from_parts(0, 2624).saturating_mul(k.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584 + i * (151 ±0) + j * (103 ±0)`
		//  Estimated: `3153 + i * (2746 ±0) + j * (2596 ±0)`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(19_400_323, 0u64)
			.saturating_add(Weight::from_parts(0, 3153))
			// Standard Error: 28_308
			.saturating_add(Weight::from_parts(3_316_885, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_649
			.saturating_add(Weight::from_parts(4_125_780, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
			.saturating_add(Weight::from_parts(0, 2596).saturating_mul(j.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `657 + i * (151 ±0) + j * (103 ±0)`
		//  Estimated: `2650 + i * (5269 ±0) + j * (2596 ±0)`
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_parts(17_127_121, 0u64)
			.saturating_add(Weight::from_parts(0, 2650))
			// Standard Error: 34_911
			.saturating_add(Weight::from_parts(5_184_583, 0u64).saturating_mul(i.into()))
			// Standard Error: 9_433
			.saturating_add(Weight::from_parts(4_196_301, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
			.saturating_add(Weight::from_parts(0, 2596).saturating_mul(j.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_membership_of_moderator_new() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_membership_of_moderator_old() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_category_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_category_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_thread(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_post(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
