// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for forum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=forum
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/forum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for forum.
pub trait WeightInfo {
	fn create_category(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn update_category_membership_of_moderator_new() -> Weight;
	fn update_category_membership_of_moderator_old() -> Weight;
	fn update_category_archival_status_lead(_i: u32, ) -> Weight;
	fn update_category_archival_status_moderator(_i: u32, ) -> Weight;
	fn update_category_title_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_title_moderator(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_category_lead(_i: u32, ) -> Weight;
	fn delete_category_moderator(_i: u32, ) -> Weight;
	fn create_thread(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn edit_thread_metadata(_i: u32, _j: u32, ) -> Weight;
	fn delete_thread(_i: u32, ) -> Weight;
	fn move_thread_to_category_lead(_i: u32, ) -> Weight;
	fn move_thread_to_category_moderator(_i: u32, ) -> Weight;
	fn moderate_thread_lead(_i: u32, _k: u32, ) -> Weight;
	fn moderate_thread_moderator(_i: u32, _k: u32, ) -> Weight;
	fn add_post(_i: u32, _j: u32, ) -> Weight;
	fn edit_post_text(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_lead(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_posts(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn set_stickied_threads_lead(_i: u32, _j: u32, ) -> Weight;
	fn set_stickied_threads_moderator(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for forum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextCategoryId (r:1 w:1)
	// Proof: Forum_1_1 NextCategoryId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `396 + i * (150 ±0)`
		//  Estimated: `4159 + i * (2746 ±0)`
		// Minimum execution time: 319_233 nanoseconds.
		Weight::from_ref_time(36_579_449)
			.saturating_add(Weight::from_proof_size(4159))
			// Standard Error: 238_032
			.saturating_add(Weight::from_ref_time(10_878_474).saturating_mul(i.into()))
			// Standard Error: 13_232
			.saturating_add(Weight::from_ref_time(2_224_668).saturating_mul(j.into()))
			// Standard Error: 13_232
			.saturating_add(Weight::from_ref_time(2_433_320).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:0 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `5899`
		// Minimum execution time: 51_825 nanoseconds.
		Weight::from_ref_time(52_746_000)
			.saturating_add(Weight::from_proof_size(5899))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:1 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_old() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `735`
		//  Estimated: `8422`
		// Minimum execution time: 53_111 nanoseconds.
		Weight::from_ref_time(53_678_000)
			.saturating_add(Weight::from_proof_size(8422))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 45_120 nanoseconds.
		Weight::from_ref_time(41_148_204)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 23_706
			.saturating_add(Weight::from_ref_time(4_912_266).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 47_721 nanoseconds.
		Weight::from_ref_time(41_988_265)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 18_526
			.saturating_add(Weight::from_ref_time(7_472_402).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 70_796 nanoseconds.
		Weight::from_ref_time(38_388_441)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 48_723
			.saturating_add(Weight::from_ref_time(5_559_509).saturating_mul(i.into()))
			// Standard Error: 2_729
			.saturating_add(Weight::from_ref_time(1_856_479).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 84_929 nanoseconds.
		Weight::from_ref_time(36_751_374)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 40_917
			.saturating_add(Weight::from_ref_time(8_013_089).saturating_mul(i.into()))
			// Standard Error: 2_292
			.saturating_add(Weight::from_ref_time(1_881_289).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3153 + i * (2746 ±0)`
		// Minimum execution time: 70_213 nanoseconds.
		Weight::from_ref_time(38_035_563)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 40_030
			.saturating_add(Weight::from_ref_time(5_478_427).saturating_mul(i.into()))
			// Standard Error: 2_242
			.saturating_add(Weight::from_ref_time(1_853_025).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `579 + i * (151 ±0)`
		//  Estimated: `2650 + i * (5269 ±0)`
		// Minimum execution time: 83_991 nanoseconds.
		Weight::from_ref_time(39_148_026)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 37_108
			.saturating_add(Weight::from_ref_time(7_672_056).saturating_mul(i.into()))
			// Standard Error: 2_078
			.saturating_add(Weight::from_ref_time(1_865_042).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `509 + i * (151 ±0)`
		//  Estimated: `3656 + i * (2746 ±0)`
		// Minimum execution time: 43_559 nanoseconds.
		Weight::from_ref_time(41_291_243)
			.saturating_add(Weight::from_proof_size(3656))
			// Standard Error: 71_768
			.saturating_add(Weight::from_ref_time(6_627_418).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:5 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[3, 6]`.
	fn delete_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `578 + i * (151 ±0)`
		//  Estimated: `8199 + i * (3469 ±17)`
		// Minimum execution time: 66_438 nanoseconds.
		Weight::from_ref_time(46_528_303)
			.saturating_add(Weight::from_proof_size(8199))
			// Standard Error: 27_798
			.saturating_add(Weight::from_ref_time(7_370_334).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(3469).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextThreadId (r:1 w:1)
	// Proof: Forum_1_1 NextThreadId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686 + i * (151 ±0)`
		//  Estimated: `11408 + i * (2746 ±0)`
		// Minimum execution time: 280_680 nanoseconds.
		Weight::from_ref_time(121_941_933)
			.saturating_add(Weight::from_proof_size(11408))
			// Standard Error: 207_368
			.saturating_add(Weight::from_ref_time(8_168_510).saturating_mul(i.into()))
			// Standard Error: 11_527
			.saturating_add(Weight::from_ref_time(1_068_628).saturating_mul(j.into()))
			// Standard Error: 11_527
			.saturating_add(Weight::from_ref_time(2_584_395).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `639 + i * (151 ±0)`
		//  Estimated: `5196 + i * (2746 ±0)`
		// Minimum execution time: 69_389 nanoseconds.
		Weight::from_ref_time(41_692_281)
			.saturating_add(Weight::from_proof_size(5196))
			// Standard Error: 31_896
			.saturating_add(Weight::from_ref_time(4_888_717).saturating_mul(i.into()))
			// Standard Error: 1_765
			.saturating_add(Weight::from_ref_time(1_224_077).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_thread(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `950 + i * (151 ±0)`
		//  Estimated: `10402 + i * (2746 ±0)`
		// Minimum execution time: 84_820 nanoseconds.
		Weight::from_ref_time(82_928_658)
			.saturating_add(Weight::from_proof_size(10402))
			// Standard Error: 43_665
			.saturating_add(Weight::from_ref_time(4_976_700).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `690 + i * (150 ±0)`
		//  Estimated: `7894 + i * (2218 ±24)`
		// Minimum execution time: 70_017 nanoseconds.
		Weight::from_ref_time(62_459_071)
			.saturating_add(Weight::from_proof_size(7894))
			// Standard Error: 70_190
			.saturating_add(Weight::from_ref_time(6_448_848).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(2218).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:7 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:7 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `913 + i * (185 ±0)`
		//  Estimated: `10515 + i * (5269 ±0)`
		// Minimum execution time: 82_216 nanoseconds.
		Weight::from_ref_time(73_954_559)
			.saturating_add(Weight::from_proof_size(10515))
			// Standard Error: 26_321
			.saturating_add(Weight::from_ref_time(9_840_448).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825 + i * (151 ±0)`
		//  Estimated: `8352 + i * (2746 ±0)`
		// Minimum execution time: 107_012 nanoseconds.
		Weight::from_ref_time(80_968_478)
			.saturating_add(Weight::from_proof_size(8352))
			// Standard Error: 51_851
			.saturating_add(Weight::from_ref_time(4_425_114).saturating_mul(i.into()))
			// Standard Error: 2_870
			.saturating_add(Weight::from_ref_time(1_254_059).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `898 + i * (151 ±0)`
		//  Estimated: `7849 + i * (5269 ±0)`
		// Minimum execution time: 120_539 nanoseconds.
		Weight::from_ref_time(78_911_391)
			.saturating_add(Weight::from_proof_size(7849))
			// Standard Error: 116_623
			.saturating_add(Weight::from_ref_time(7_096_197).saturating_mul(i.into()))
			// Standard Error: 6_455
			.saturating_add(Weight::from_ref_time(1_275_965).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn add_post(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `983 + i * (151 ±0)`
		//  Estimated: `10905 + i * (2746 ±0)`
		// Minimum execution time: 132_530 nanoseconds.
		Weight::from_ref_time(106_990_265)
			.saturating_add(Weight::from_proof_size(10905))
			// Standard Error: 71_954
			.saturating_add(Weight::from_ref_time(4_568_001).saturating_mul(i.into()))
			// Standard Error: 3_982
			.saturating_add(Weight::from_ref_time(2_570_237).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818 + i * (151 ±0)`
		//  Estimated: `7820 + i * (2746 ±0)`
		// Minimum execution time: 85_074 nanoseconds.
		Weight::from_ref_time(54_435_493)
			.saturating_add(Weight::from_proof_size(7820))
			// Standard Error: 164_020
			.saturating_add(Weight::from_ref_time(5_486_991).saturating_mul(i.into()))
			// Standard Error: 9_079
			.saturating_add(Weight::from_ref_time(2_547_456).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037 + i * (151 ±0)`
		//  Estimated: `10976 + i * (2746 ±0)`
		// Minimum execution time: 129_703 nanoseconds.
		Weight::from_ref_time(95_498_625)
			.saturating_add(Weight::from_proof_size(10976))
			// Standard Error: 107_838
			.saturating_add(Weight::from_ref_time(5_879_509).saturating_mul(i.into()))
			// Standard Error: 5_969
			.saturating_add(Weight::from_ref_time(1_262_526).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1110 + i * (151 ±0)`
		//  Estimated: `10473 + i * (5269 ±0)`
		// Minimum execution time: 143_970 nanoseconds.
		Weight::from_ref_time(99_846_862)
			.saturating_add(Weight::from_proof_size(10473))
			// Standard Error: 36_147
			.saturating_add(Weight::from_ref_time(7_579_614).saturating_mul(i.into()))
			// Standard Error: 2_000
			.saturating_add(Weight::from_ref_time(1_235_729).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:20 w:20)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[1, 20]`.
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1100 + i * (151 ±0) + k * (132 ±0)`
		//  Estimated: `10402 + i * (2746 ±0) + k * (2624 ±0)`
		// Minimum execution time: 244_506 nanoseconds.
		Weight::from_ref_time(245_922_000)
			.saturating_add(Weight::from_proof_size(10402))
			// Standard Error: 523_091
			.saturating_add(Weight::from_ref_time(10_054_088).saturating_mul(i.into()))
			// Standard Error: 154_122
			.saturating_add(Weight::from_ref_time(45_013_558).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2624).saturating_mul(k.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584 + i * (151 ±0) + j * (103 ±0)`
		//  Estimated: `3153 + i * (2746 ±0) + j * (2596 ±0)`
		// Minimum execution time: 69_950 nanoseconds.
		Weight::from_ref_time(44_644_267)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 38_233
			.saturating_add(Weight::from_ref_time(4_873_203).saturating_mul(i.into()))
			// Standard Error: 10_331
			.saturating_add(Weight::from_ref_time(6_151_155).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2746).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2596).saturating_mul(j.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `657 + i * (151 ±0) + j * (103 ±0)`
		//  Estimated: `2650 + i * (5269 ±0) + j * (2596 ±0)`
		// Minimum execution time: 83_657 nanoseconds.
		Weight::from_ref_time(42_631_378)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 34_822
			.saturating_add(Weight::from_ref_time(7_488_243).saturating_mul(i.into()))
			// Standard Error: 9_409
			.saturating_add(Weight::from_ref_time(6_187_498).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(5269).saturating_mul(i.into()))
			.saturating_add(Weight::from_proof_size(2596).saturating_mul(j.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_membership_of_moderator_new() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_membership_of_moderator_old() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_category_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_category_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_thread(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn add_post(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
