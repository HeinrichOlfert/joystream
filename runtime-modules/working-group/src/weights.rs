// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for working_group
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-31, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --pallet=working_group
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/working-group/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for working_group.
pub trait WeightInfo {
	fn on_initialize_leaving(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward_cant_pay(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_without_missing_reward(_i: u32, ) -> Weight;
	fn apply_on_opening(_i: u32, ) -> Weight;
	fn fill_opening_lead() -> Weight;
	fn fill_opening_worker(_i: u32, ) -> Weight;
	fn update_role_account() -> Weight;
	fn cancel_opening() -> Weight;
	fn withdraw_application() -> Weight;
	fn slash_stake(_i: u32, ) -> Weight;
	fn terminate_role_worker(_i: u32, ) -> Weight;
	fn terminate_role_lead(_i: u32, ) -> Weight;
	fn increase_stake() -> Weight;
	fn decrease_stake() -> Weight;
	fn spend_from_budget() -> Weight;
	fn fund_working_group_budget() -> Weight;
	fn update_reward_amount() -> Weight;
	fn set_status_text(_i: u32, ) -> Weight;
	fn update_reward_account() -> Weight;
	fn set_budget() -> Weight;
	fn add_opening(_i: u32, ) -> Weight;
	fn leave_role(_i: u32, ) -> Weight;
	fn lead_remark(_i: u32, ) -> Weight;
	fn worker_remark(_i: u32, ) -> Weight;
}

/// Weights for working_group using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:30 w:30)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_leaving(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (517 ±0)`
		//  Estimated: `4163 + i * (9027 ±0)`
		// Minimum execution time: 89_000 nanoseconds.
		Weight::from_parts(18_403_645, 0u64)
			.saturating_add(Weight::from_proof_size(4163))
			// Standard Error: 17_892
			.saturating_add(Weight::from_parts(36_044_053, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(9027).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246 + i * (374 ±0)`
		//  Estimated: `3161 + i * (5253 ±0)`
		// Minimum execution time: 82_000 nanoseconds.
		Weight::from_parts(10_472_586, 0u64)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 21_914
			.saturating_add(Weight::from_parts(35_903_685, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(5253).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + i * (194 ±0)`
		//  Estimated: `3161 + i * (2650 ±0)`
		// Minimum execution time: 42_000 nanoseconds.
		Weight::from_parts(7_909_154, 0u64)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 18_464
			.saturating_add(Weight::from_parts(15_971_556, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2650).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `262 + i * (358 ±0)`
		//  Estimated: `3161 + i * (5253 ±0)`
		// Minimum execution time: 71_000 nanoseconds.
		Weight::from_parts(25_141_582, 0u64)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 24_876
			.saturating_add(Weight::from_parts(22_007_215, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(5253).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:0)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextApplicationId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextApplicationId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:0 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	fn apply_on_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `826`
		//  Estimated: `14601`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_parts(40_552_472, 0u64)
			.saturating_add(Weight::from_proof_size(14601))
			// Standard Error: 2_520
			.saturating_add(Weight::from_parts(1_487_675, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:0 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn fill_opening_lead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `453`
		//  Estimated: `6737`
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_parts(30_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6737))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:29)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:29 w:29)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn fill_opening_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `859 + i * (218 ±0)`
		//  Estimated: `15764 + i * (2378 ±6)`
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_parts(31_878_502, 0u64)
			.saturating_add(Weight::from_proof_size(15764))
			// Standard Error: 12_366
			.saturating_add(Weight::from_parts(10_491_880, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2378).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_role_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `705`
		//  Estimated: `5250`
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_parts(18_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(5250))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_opening() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `954`
		//  Estimated: `12119`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(38_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12119))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `9020`
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(24_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9020))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn slash_stake(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `961`
		//  Estimated: `12180`
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_parts(49_993_730, 0u64)
			.saturating_add(Weight::from_proof_size(12180))
			// Standard Error: 1_109
			.saturating_add(Weight::from_parts(423_430, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `13190`
		// Minimum execution time: 80_000 nanoseconds.
		Weight::from_parts(82_244_749, 0u64)
			.saturating_add(Weight::from_proof_size(13190))
			// Standard Error: 2_393
			.saturating_add(Weight::from_parts(771_228, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `10540`
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_parts(78_953_053, 0u64)
			.saturating_add(Weight::from_proof_size(10540))
			// Standard Error: 2_426
			.saturating_add(Weight::from_parts(804_219, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn increase_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `9027`
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_parts(32_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(9027))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn decrease_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `961`
		//  Estimated: `12180`
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_parts(37_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(12180))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn spend_from_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `629`
		//  Estimated: `6267`
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_parts(24_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(6267))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn fund_working_group_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `5714`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(25_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(5714))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `634`
		//  Estimated: `5803`
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_parts(20_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(5803))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup StatusTextHash (r:0 w:1)
	// Proof: Instance3WorkingGroup StatusTextHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn set_status_text(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `3153`
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_572_993, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 2_014
			.saturating_add(Weight::from_parts(1_451_878, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `2650`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(2650))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup Budget (r:0 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_parts(7_000_000, 0u64)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextOpeningId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextOpeningId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:0 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn add_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `10033`
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_parts(44_174_686, 0u64)
			.saturating_add(Weight::from_proof_size(10033))
			// Standard Error: 2_127
			.saturating_add(Weight::from_parts(1_485_163, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn leave_role(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `2650`
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_parts(15_900_268, 0u64)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 863
			.saturating_add(Weight::from_parts(421_884, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn lead_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `3153`
		// Minimum execution time: 13_000 nanoseconds.
		Weight::from_parts(14_396_804, 0u64)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 793
			.saturating_add(Weight::from_parts(473_852, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn worker_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `457`
		//  Estimated: `2650`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(14_915_147, 0u64)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 859
			.saturating_add(Weight::from_parts(473_361, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_leaving(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn apply_on_opening(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fill_opening_lead() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fill_opening_worker(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_role_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_opening() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_application() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn slash_stake(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn terminate_role_worker(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn terminate_role_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn increase_stake() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn decrease_stake() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn spend_from_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fund_working_group_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_reward_amount() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_status_text(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_reward_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_opening(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn leave_role(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn lead_remark(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn worker_remark(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
