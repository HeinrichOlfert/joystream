// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for working_group
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=working_group
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/working-group/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for working_group.
pub trait WeightInfo {
	fn on_initialize_leaving(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward_cant_pay(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_without_missing_reward(_i: u32, ) -> Weight;
	fn apply_on_opening(_i: u32, ) -> Weight;
	fn fill_opening_lead() -> Weight;
	fn fill_opening_worker(_i: u32, ) -> Weight;
	fn update_role_account() -> Weight;
	fn cancel_opening() -> Weight;
	fn withdraw_application() -> Weight;
	fn slash_stake(_i: u32, ) -> Weight;
	fn terminate_role_worker(_i: u32, ) -> Weight;
	fn terminate_role_lead(_i: u32, ) -> Weight;
	fn increase_stake() -> Weight;
	fn decrease_stake() -> Weight;
	fn spend_from_budget() -> Weight;
	fn fund_working_group_budget() -> Weight;
	fn update_reward_amount() -> Weight;
	fn set_status_text(_i: u32, ) -> Weight;
	fn update_reward_account() -> Weight;
	fn set_budget() -> Weight;
	fn add_opening(_i: u32, ) -> Weight;
	fn leave_role(_i: u32, ) -> Weight;
	fn lead_remark(_i: u32, ) -> Weight;
	fn worker_remark(_i: u32, ) -> Weight;
}

/// Weights for working_group using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:30 w:30)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_leaving(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (517 ±0)`
		//  Estimated: `4163 + i * (9027 ±0)`
		// Minimum execution time: 147_481 nanoseconds.
		Weight::from_ref_time(43_530_922)
			.saturating_add(Weight::from_proof_size(4163))
			// Standard Error: 61_804
			.saturating_add(Weight::from_ref_time(54_219_510).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(9027).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246 + i * (374 ±0)`
		//  Estimated: `3161 + i * (5253 ±0)`
		// Minimum execution time: 133_981 nanoseconds.
		Weight::from_ref_time(26_619_279)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 83_368
			.saturating_add(Weight::from_ref_time(52_587_608).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(5253).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + i * (194 ±0)`
		//  Estimated: `3161 + i * (2650 ±0)`
		// Minimum execution time: 68_807 nanoseconds.
		Weight::from_ref_time(20_846_803)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 28_444
			.saturating_add(Weight::from_ref_time(22_540_730).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2650).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `262 + i * (358 ±0)`
		//  Estimated: `3161 + i * (5253 ±0)`
		// Minimum execution time: 115_073 nanoseconds.
		Weight::from_ref_time(51_743_831)
			.saturating_add(Weight::from_proof_size(3161))
			// Standard Error: 38_422
			.saturating_add(Weight::from_ref_time(31_311_620).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(5253).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:0)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextApplicationId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextApplicationId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:0 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	fn apply_on_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `826`
		//  Estimated: `14601`
		// Minimum execution time: 75_245 nanoseconds.
		Weight::from_ref_time(73_767_805)
			.saturating_add(Weight::from_proof_size(14601))
			// Standard Error: 5_546
			.saturating_add(Weight::from_ref_time(2_577_451).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:0 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn fill_opening_lead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `453`
		//  Estimated: `6737`
		// Minimum execution time: 55_929 nanoseconds.
		Weight::from_ref_time(56_615_000)
			.saturating_add(Weight::from_proof_size(6737))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:29)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:29 w:29)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn fill_opening_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `859 + i * (218 ±0)`
		//  Estimated: `15764 + i * (2378 ±6)`
		// Minimum execution time: 92_040 nanoseconds.
		Weight::from_ref_time(64_995_384)
			.saturating_add(Weight::from_proof_size(15764))
			// Standard Error: 23_614
			.saturating_add(Weight::from_ref_time(15_829_151).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2378).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_role_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `705`
		//  Estimated: `5250`
		// Minimum execution time: 34_324 nanoseconds.
		Weight::from_ref_time(34_683_000)
			.saturating_add(Weight::from_proof_size(5250))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_opening() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `954`
		//  Estimated: `12119`
		// Minimum execution time: 66_439 nanoseconds.
		Weight::from_ref_time(67_517_000)
			.saturating_add(Weight::from_proof_size(12119))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `647`
		//  Estimated: `9020`
		// Minimum execution time: 44_723 nanoseconds.
		Weight::from_ref_time(45_232_000)
			.saturating_add(Weight::from_proof_size(9020))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn slash_stake(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `961`
		//  Estimated: `12180`
		// Minimum execution time: 85_533 nanoseconds.
		Weight::from_ref_time(87_448_043)
			.saturating_add(Weight::from_proof_size(12180))
			// Standard Error: 1_830
			.saturating_add(Weight::from_ref_time(1_063_294).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `964`
		//  Estimated: `13190`
		// Minimum execution time: 133_139 nanoseconds.
		Weight::from_ref_time(138_731_950)
			.saturating_add(Weight::from_proof_size(13190))
			// Standard Error: 16_152
			.saturating_add(Weight::from_ref_time(2_072_036).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `787`
		//  Estimated: `10540`
		// Minimum execution time: 129_624 nanoseconds.
		Weight::from_ref_time(133_352_671)
			.saturating_add(Weight::from_proof_size(10540))
			// Standard Error: 8_782
			.saturating_add(Weight::from_ref_time(2_133_147).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn increase_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `9027`
		// Minimum execution time: 54_079 nanoseconds.
		Weight::from_ref_time(55_275_000)
			.saturating_add(Weight::from_proof_size(9027))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn decrease_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `961`
		//  Estimated: `12180`
		// Minimum execution time: 64_560 nanoseconds.
		Weight::from_ref_time(65_339_000)
			.saturating_add(Weight::from_proof_size(12180))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn spend_from_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `629`
		//  Estimated: `6267`
		// Minimum execution time: 43_898 nanoseconds.
		Weight::from_ref_time(44_735_000)
			.saturating_add(Weight::from_proof_size(6267))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn fund_working_group_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `497`
		//  Estimated: `5714`
		// Minimum execution time: 46_418 nanoseconds.
		Weight::from_ref_time(47_482_000)
			.saturating_add(Weight::from_proof_size(5714))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `634`
		//  Estimated: `5803`
		// Minimum execution time: 36_425 nanoseconds.
		Weight::from_ref_time(37_050_000)
			.saturating_add(Weight::from_proof_size(5803))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup StatusTextHash (r:0 w:1)
	// Proof: Instance3WorkingGroup StatusTextHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn set_status_text(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `3153`
		// Minimum execution time: 28_858 nanoseconds.
		Weight::from_ref_time(30_207_005)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 2_321
			.saturating_add(Weight::from_ref_time(2_378_923).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `2650`
		// Minimum execution time: 27_803 nanoseconds.
		Weight::from_ref_time(28_412_000)
			.saturating_add(Weight::from_proof_size(2650))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup Budget (r:0 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_294 nanoseconds.
		Weight::from_ref_time(13_633_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextOpeningId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextOpeningId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:0 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn add_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `784`
		//  Estimated: `10033`
		// Minimum execution time: 76_253 nanoseconds.
		Weight::from_ref_time(74_977_049)
			.saturating_add(Weight::from_proof_size(10033))
			// Standard Error: 28_997
			.saturating_add(Weight::from_ref_time(2_664_875).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn leave_role(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `2650`
		// Minimum execution time: 28_525 nanoseconds.
		Weight::from_ref_time(29_219_350)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 2_810
			.saturating_add(Weight::from_ref_time(1_067_735).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn lead_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `3153`
		// Minimum execution time: 26_185 nanoseconds.
		Weight::from_ref_time(26_841_469)
			.saturating_add(Weight::from_proof_size(3153))
			// Standard Error: 1_011
			.saturating_add(Weight::from_ref_time(1_234_944).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn worker_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `457`
		//  Estimated: `2650`
		// Minimum execution time: 26_107 nanoseconds.
		Weight::from_ref_time(27_269_995)
			.saturating_add(Weight::from_proof_size(2650))
			// Standard Error: 1_627
			.saturating_add(Weight::from_ref_time(1_206_341).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_leaving(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn apply_on_opening(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn fill_opening_lead() -> Weight {
		Weight::from_ref_time(0)
	}
	fn fill_opening_worker(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_role_account() -> Weight {
		Weight::from_ref_time(0)
	}
	fn cancel_opening() -> Weight {
		Weight::from_ref_time(0)
	}
	fn withdraw_application() -> Weight {
		Weight::from_ref_time(0)
	}
	fn slash_stake(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn terminate_role_worker(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn terminate_role_lead(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn increase_stake() -> Weight {
		Weight::from_ref_time(0)
	}
	fn decrease_stake() -> Weight {
		Weight::from_ref_time(0)
	}
	fn spend_from_budget() -> Weight {
		Weight::from_ref_time(0)
	}
	fn fund_working_group_budget() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_reward_amount() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_status_text(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_reward_account() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_budget() -> Weight {
		Weight::from_ref_time(0)
	}
	fn add_opening(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn leave_role(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn lead_remark(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn worker_remark(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
