// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=membership
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/membership/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for membership.
pub trait WeightInfo {
	fn buy_membership_without_referrer(_i: u32, _j: u32, ) -> Weight;
	fn buy_membership_with_referrer(_i: u32, _j: u32, ) -> Weight;
	fn update_profile(_i: u32, _j: u32, ) -> Weight;
	fn update_accounts_none() -> Weight;
	fn update_accounts_root() -> Weight;
	fn update_accounts_controller() -> Weight;
	fn update_accounts_both() -> Weight;
	fn set_referral_cut() -> Weight;
	fn transfer_invites() -> Weight;
	fn invite_member(_i: u32, _j: u32, ) -> Weight;
	fn gift_membership(_i: u32, _j: u32, ) -> Weight;
	fn set_membership_price() -> Weight;
	fn update_profile_verification() -> Weight;
	fn set_leader_invitation_quota() -> Weight;
	fn set_initial_invitation_balance() -> Weight;
	fn set_initial_invitation_count() -> Weight;
	fn add_staking_account_candidate() -> Weight;
	fn confirm_staking_account() -> Weight;
	fn remove_staking_account() -> Weight;
	fn member_remark_without_payment() -> Weight;
	fn member_remark_with_payment() -> Weight;
	fn create_member(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for membership using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `6647`
		// Minimum execution time: 172_001 nanoseconds.
		Weight::from_ref_time(69_590_815)
			.saturating_add(Weight::from_proof_size(6647))
			// Standard Error: 15_432
			.saturating_add(Weight::from_ref_time(2_283_164).saturating_mul(i.into()))
			// Standard Error: 15_432
			.saturating_add(Weight::from_ref_time(1_114_319).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership ReferralCut (r:1 w:0)
	// Proof: Membership ReferralCut (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `523`
		//  Estimated: `9743`
		// Minimum execution time: 203_326 nanoseconds.
		Weight::from_ref_time(91_732_330)
			.saturating_add(Weight::from_proof_size(9743))
			// Standard Error: 14_290
			.saturating_add(Weight::from_ref_time(2_285_284).saturating_mul(i.into()))
			// Standard Error: 14_290
			.saturating_add(Weight::from_ref_time(1_305_164).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:2)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn update_profile(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `5131`
		// Minimum execution time: 143_971 nanoseconds.
		Weight::from_ref_time(45_574_000)
			.saturating_add(Weight::from_proof_size(5131))
			// Standard Error: 13_636
			.saturating_add(Weight::from_ref_time(2_516_779).saturating_mul(i.into()))
			// Standard Error: 13_636
			.saturating_add(Weight::from_ref_time(1_135_915).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn update_accounts_none() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_386 nanoseconds.
		Weight::from_ref_time(5_600_000)
			.saturating_add(Weight::from_proof_size(0))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `2600`
		// Minimum execution time: 24_126 nanoseconds.
		Weight::from_ref_time(24_982_000)
			.saturating_add(Weight::from_proof_size(2600))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `2600`
		// Minimum execution time: 24_073 nanoseconds.
		Weight::from_ref_time(24_735_000)
			.saturating_add(Weight::from_proof_size(2600))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_both() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `2600`
		// Minimum execution time: 24_298 nanoseconds.
		Weight::from_ref_time(24_720_000)
			.saturating_add(Weight::from_proof_size(2600))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership ReferralCut (r:0 w:1)
	// Proof: Membership ReferralCut (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn set_referral_cut() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_756 nanoseconds.
		Weight::from_ref_time(13_215_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:2 w:2)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn transfer_invites() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `5200`
		// Minimum execution time: 33_018 nanoseconds.
		Weight::from_ref_time(33_583_000)
			.saturating_add(Weight::from_proof_size(5200))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:2)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Instance6WorkingGroup Budget (r:1 w:1)
	// Proof: Instance6WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationBalance (r:1 w:0)
	// Proof: Membership InitialInvitationBalance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn invite_member(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `582`
		//  Estimated: `13033`
		// Minimum execution time: 189_550 nanoseconds.
		Weight::from_ref_time(97_221_906)
			.saturating_add(Weight::from_proof_size(13033))
			// Standard Error: 15_282
			.saturating_add(Weight::from_ref_time(2_242_387).saturating_mul(i.into()))
			// Standard Error: 15_101
			.saturating_add(Weight::from_ref_time(1_116_129).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:2 w:2)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `292`
		//  Estimated: `18902`
		// Minimum execution time: 263_823 nanoseconds.
		Weight::from_ref_time(157_858_373)
			.saturating_add(Weight::from_proof_size(18902))
			// Standard Error: 24_358
			.saturating_add(Weight::from_ref_time(2_335_509).saturating_mul(i.into()))
			// Standard Error: 24_069
			.saturating_add(Weight::from_ref_time(1_196_975).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: Membership MembershipPrice (r:0 w:1)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_membership_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_388 nanoseconds.
		Weight::from_ref_time(13_798_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance6WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_profile_verification() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `5250`
		// Minimum execution time: 32_578 nanoseconds.
		Weight::from_ref_time(33_501_000)
			.saturating_add(Weight::from_proof_size(5250))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance6WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance6WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance6WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn set_leader_invitation_quota() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `5753`
		// Minimum execution time: 33_967 nanoseconds.
		Weight::from_ref_time(34_983_000)
			.saturating_add(Weight::from_proof_size(5753))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership InitialInvitationBalance (r:0 w:1)
	// Proof: Membership InitialInvitationBalance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_initial_invitation_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_907 nanoseconds.
		Weight::from_ref_time(13_532_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership InitialInvitationCount (r:0 w:1)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_initial_invitation_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_667 nanoseconds.
		Weight::from_ref_time(13_000_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn add_staking_account_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `520`
		//  Estimated: `11509`
		// Minimum execution time: 53_290 nanoseconds.
		Weight::from_ref_time(54_588_000)
			.saturating_add(Weight::from_proof_size(11509))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	fn confirm_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `331`
		//  Estimated: `5132`
		// Minimum execution time: 35_469 nanoseconds.
		Weight::from_ref_time(36_290_000)
			.saturating_add(Weight::from_proof_size(5132))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `637`
		//  Estimated: `11509`
		// Minimum execution time: 51_153 nanoseconds.
		Weight::from_ref_time(52_392_000)
			.saturating_add(Weight::from_proof_size(11509))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn member_remark_without_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `2600`
		// Minimum execution time: 21_218 nanoseconds.
		Weight::from_ref_time(21_505_000)
			.saturating_add(Weight::from_proof_size(2600))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn member_remark_with_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `510`
		//  Estimated: `7806`
		// Minimum execution time: 62_776 nanoseconds.
		Weight::from_ref_time(63_407_000)
			.saturating_add(Weight::from_proof_size(7806))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn create_member(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3533`
		// Minimum execution time: 153_777 nanoseconds.
		Weight::from_ref_time(29_798_904)
			.saturating_add(Weight::from_proof_size(3533))
			// Standard Error: 13_431
			.saturating_add(Weight::from_ref_time(2_707_535).saturating_mul(i.into()))
			// Standard Error: 13_272
			.saturating_add(Weight::from_ref_time(1_355_694).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_profile(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_accounts_none() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_accounts_root() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_accounts_controller() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_accounts_both() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_referral_cut() -> Weight {
		Weight::from_ref_time(0)
	}
	fn transfer_invites() -> Weight {
		Weight::from_ref_time(0)
	}
	fn invite_member(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_membership_price() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_profile_verification() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_leader_invitation_quota() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_initial_invitation_balance() -> Weight {
		Weight::from_ref_time(0)
	}
	fn set_initial_invitation_count() -> Weight {
		Weight::from_ref_time(0)
	}
	fn add_staking_account_candidate() -> Weight {
		Weight::from_ref_time(0)
	}
	fn confirm_staking_account() -> Weight {
		Weight::from_ref_time(0)
	}
	fn remove_staking_account() -> Weight {
		Weight::from_ref_time(0)
	}
	fn member_remark_without_payment() -> Weight {
		Weight::from_ref_time(0)
	}
	fn member_remark_with_payment() -> Weight {
		Weight::from_ref_time(0)
	}
	fn create_member(i: u32, j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
