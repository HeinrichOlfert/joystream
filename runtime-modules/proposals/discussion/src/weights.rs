// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for proposals_discussion
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-15, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=proposals_discussion
// --extrinsic=*
// --chain=prod-test
// --steps=2
// --repeat=2
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/proposals/discussion/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals_discussion.
pub trait WeightInfo {
	fn add_post(_j: u32, ) -> Weight;
	fn update_post(_j: u32, ) -> Weight;
	fn delete_post() -> Weight;
	fn change_thread_mode(_i: u32, ) -> Weight;
}

/// Weights for proposals_discussion using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:1 w:0)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion PostCount (r:1 w:1)
	// Proof: ProposalDiscussion PostCount (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion PostThreadIdByPostId (r:0 w:1)
	// Proof: ProposalDiscussion PostThreadIdByPostId (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// The range of component `j` is `[0, 100]`.
	fn add_post(j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2120`
		//  Estimated: `11802`
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_ref_time(63_500_000)
			.saturating_add(Weight::from_proof_size(11802))
			// Standard Error: 50_249
			.saturating_add(Weight::from_ref_time(545_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: ProposalDiscussion ThreadById (r:1 w:0)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion PostThreadIdByPostId (r:1 w:1)
	// Proof: ProposalDiscussion PostThreadIdByPostId (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `j` is `[0, 100]`.
	fn update_post(j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `626`
		//  Estimated: `7857`
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(24_500_000)
			.saturating_add(Weight::from_proof_size(7857))
			// Standard Error: 75_166
			.saturating_add(Weight::from_ref_time(560_000).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion PostThreadIdByPostId (r:1 w:1)
	// Proof: ProposalDiscussion PostThreadIdByPostId (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:1 w:0)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn delete_post() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `932`
		//  Estimated: `13063`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(42_000_000)
			.saturating_add(Weight::from_proof_size(13063))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:20 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:1 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn change_thread_mode(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1113 + i * (168 ±0)`
		//  Estimated: `3493 + i * (2600 ±0)`
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(26_973_684)
			.saturating_add(Weight::from_proof_size(3493))
			// Standard Error: 26_315
			.saturating_add(Weight::from_ref_time(3_026_315).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_proof_size(2600).saturating_mul(i.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn add_post(j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_post(j: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn delete_post() -> Weight {
		Weight::from_ref_time(0)
	}
	fn change_thread_mode(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
