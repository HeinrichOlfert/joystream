// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for proposals_engine
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-15, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=proposals_engine
// --extrinsic=*
// --chain=prod-test
// --steps=2
// --repeat=2
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/proposals/engine/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals_engine.
pub trait WeightInfo {
	fn vote(_i: u32, ) -> Weight;
	fn cancel_proposal() -> Weight;
	fn veto_proposal() -> Weight;
	fn proposer_remark() -> Weight;
	fn on_initialize_immediate_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_pending_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_approved_pending_constitutionality(_i: u32, ) -> Weight;
	fn on_initialize_rejected(_i: u32, ) -> Weight;
	fn on_initialize_slashed(_i: u32, ) -> Weight;
	fn cancel_active_and_pending_proposals(_i: u32, ) -> Weight;
}

/// Weights for proposals_engine using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:1 w:1)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn vote(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1432`
		//  Estimated: `8555`
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(32_000_000)
			.saturating_add(Weight::from_proof_size(8555))
			// Standard Error: 80_622
			.saturating_add(Weight::from_ref_time(490_000).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	fn cancel_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `976`
		//  Estimated: `12091`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_ref_time(70_000_000)
			.saturating_add(Weight::from_proof_size(12091))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	fn veto_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `691`
		//  Estimated: `9491`
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(42_000_000)
			.saturating_add(Weight::from_proof_size(9491))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: ProposalEngine Proposals (r:1 w:0)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	fn proposer_remark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `612`
		//  Estimated: `5215`
		// Minimum execution time: 18_000 nanoseconds.
		Weight::from_ref_time(18_000_000)
			.saturating_add(Weight::from_proof_size(5215))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:20 w:20)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:20 w:20)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:20 w:20)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:20 w:20)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:20)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1036 + i * (553 ±0)`
		//  Estimated: `3934 + i * (3159739 ±0)`
		// Minimum execution time: 59_000 nanoseconds.
		Weight::from_ref_time(18_605_263)
			.saturating_add(Weight::from_proof_size(3934))
			// Standard Error: 78_947
			.saturating_add(Weight::from_ref_time(40_394_736).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(3159739).saturating_mul(i.into()))
	}
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:20 w:20)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:20 w:20)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:20)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `156 + i * (252 ±0)`
		//  Estimated: `3114 + i * (3153362 ±0)`
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(9_552_631)
			.saturating_add(Weight::from_proof_size(3114))
			// Standard Error: 184_210
			.saturating_add(Weight::from_ref_time(21_447_368).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(3153362).saturating_mul(i.into()))
	}
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `841 + i * (172 ±0)`
		//  Estimated: `3435 + i * (2615 ±0)`
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(13_236_842)
			.saturating_add(Weight::from_proof_size(3435))
			// Standard Error: 37_216
			.saturating_add(Weight::from_ref_time(15_263_157).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(2615).saturating_mul(i.into()))
	}
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:20 w:20)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:20 w:20)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:60 w:60)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:20)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:20)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn on_initialize_rejected(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1053 + i * (587 ±0)`
		//  Estimated: `3934 + i * (16552 ±0)`
		// Minimum execution time: 74_000 nanoseconds.
		Weight::from_ref_time(18_263_157)
			.saturating_add(Weight::from_proof_size(3934))
			// Standard Error: 74_432
			.saturating_add(Weight::from_ref_time(56_736_842).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(16552).saturating_mul(i.into()))
	}
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Proof: Council CouncilMembers (max_values: Some(1), max_size: Some(325), added: 820, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:20 w:20)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:20 w:20)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:60 w:60)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:20)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:20)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn on_initialize_slashed(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1053 + i * (587 ±0)`
		//  Estimated: `3934 + i * (16552 ±0)`
		// Minimum execution time: 68_000 nanoseconds.
		Weight::from_ref_time(18_526_315)
			.saturating_add(Weight::from_proof_size(3934))
			// Standard Error: 212_164
			.saturating_add(Weight::from_ref_time(49_973_684).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(16552).saturating_mul(i.into()))
	}
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Proof: ProposalEngine ActiveProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: ProposalEngine Proposals (r:21 w:20)
	// Proof: ProposalEngine Proposals (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:20 w:20)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:20 w:20)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:60 w:60)
	// Proof: ProposalEngine VoteExistsByProposalByVoter (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:20)
	// Proof: ProposalsCodex ThreadIdByProposalId (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Proof: ProposalDiscussion ThreadById (max_values: None, max_size: Some(198), added: 2673, mode: MaxEncodedLen)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:20)
	// Proof: ProposalEngine DispatchableCallCode (max_values: None, max_size: Some(3145752), added: 3148227, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 20]`.
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403 + i * (587 ±0)`
		//  Estimated: `3114 + i * (16552 ±0)`
		// Minimum execution time: 43_000 nanoseconds.
		Weight::from_ref_time(13_578_947)
			.saturating_add(Weight::from_proof_size(3114))
			// Standard Error: 148_864
			.saturating_add(Weight::from_ref_time(31_421_052).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_proof_size(16552).saturating_mul(i.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn vote(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn cancel_proposal() -> Weight {
		Weight::from_ref_time(0)
	}
	fn veto_proposal() -> Weight {
		Weight::from_ref_time(0)
	}
	fn proposer_remark() -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_rejected(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn on_initialize_slashed(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
}
