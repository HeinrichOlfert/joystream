// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for joystream_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-27, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=joystream_utility
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/utility/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for joystream_utility.
pub trait WeightInfo {
	fn execute_signal_proposal(_i: u32, ) -> Weight;
	fn update_working_group_budget_positive() -> Weight;
	fn update_working_group_budget_negative() -> Weight;
	fn burn_account_tokens() -> Weight;
}

/// Weights for joystream_utility using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `i` is `[1, 100]`.
	fn execute_signal_proposal(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_973 nanoseconds.
		Weight::from_ref_time(12_690_102)
			.saturating_add(Weight::from_proof_size(0))
			// Standard Error: 1_027
			.saturating_add(Weight::from_ref_time(1_202_086).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup Budget (r:1 w:1)
	// Proof: Instance1WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_working_group_budget_positive() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291`
		//  Estimated: `1022`
		// Minimum execution time: 33_055 nanoseconds.
		Weight::from_ref_time(33_816_000)
			.saturating_add(Weight::from_proof_size(1022))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup Budget (r:1 w:1)
	// Proof: Instance1WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Council Budget (r:1 w:1)
	// Proof: Council Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn update_working_group_budget_negative() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291`
		//  Estimated: `1022`
		// Minimum execution time: 32_556 nanoseconds.
		Weight::from_ref_time(33_611_000)
			.saturating_add(Weight::from_proof_size(1022))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn burn_account_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `2603`
		// Minimum execution time: 38_459 nanoseconds.
		Weight::from_ref_time(39_296_000)
			.saturating_add(Weight::from_proof_size(2603))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn execute_signal_proposal(i: u32, ) -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_working_group_budget_positive() -> Weight {
		Weight::from_ref_time(0)
	}
	fn update_working_group_budget_negative() -> Weight {
		Weight::from_ref_time(0)
	}
	fn burn_account_tokens() -> Weight {
		Weight::from_ref_time(0)
	}
}
